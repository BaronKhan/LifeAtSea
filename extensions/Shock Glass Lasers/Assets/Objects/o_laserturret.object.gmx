<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The laserturret is like a player object that is holding a gun.
//it has a recoil
alarm[0]=1;
friction=.1;//the turret moves around randomly, so we need friction
width=32+random(32);//width of the laser beam
texture=surface_get_texture(application_surface);//get a texture from the application surface
seglength=width;//bullets and lasers are drawn on a path, which is like a chain. In this case, one segment in the chain is as long as it is wide.
c1=random_color();//inner color
c2=random_color();//outer color
weighting=0;//weighting is a variable between 1-0 that animates the lasers by wiggling the chain.
recoil_speed=15+random(10);//the number of steps between shots.
beams=2+choose(1,2,3);//how many beams should the laser have
degrees_randomized=5+2*beams;//beams are offset by some angle, in degrees
curl=0;//used if you want your lasers to curl in a spiral before hitting the target.

//this loop creates a path for each individual beam in the laser.
for (i=0;i&lt;beams;i+=1)
{
    path[i]=path_add();
    path_set_kind(path[i],1);
    path_set_closed(path[i],0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(x,y,o_bullet)

for (i=0;i&lt;beams;i+=1)
{
    //see create event for explanation of these variables.
    path_random(x,y,mouse_x,mouse_y,path[i],seglength*3,degrees_randomized,curl)
}
alarm[0]=(recoil_speed/3)+random(recoil_speed);
motion_add(random(360),random(1))
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>texture=surface_get_texture(application_surface);
//This is a triangle wave which is used to animate the path.
//each point on the path contains a random number that determines how it moves when weighting is changed.
//(see script path_random)
weighting=(current_time/(recoil_speed*20) mod 2) -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>112</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_wrap</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>4</kind>
            <string>2</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (i=0;i&lt;beams;i+=1)
{
    /*there are three sets of x,y coordinates in play here.
    x,y of the points on the path, which is set up in the alarm event using the same coordinate system as objects
    x,y of the view
    x,y of the pixels inside your game window
    
    all x,y coordinates in the draw_gui event refer to actual pixels in the game window.
    therefore, the location of the path drawing has to be offset by the position of the view in the room.
    */
    draw_magnify_path_simple(-view_xview,-view_yview,path[i],seglength,width*(2-i/beams),texture,view_wview,view_hview,weighting/4,c1,c_white,1-.8*abs(weighting),weighting)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c1)
draw_circle(x,y,32,0)
draw_set_color(c_black)
draw_circle(x,y,32,1)
draw_set_blend_mode(bm_max)
draw_circle_color(x,y,32,c_gray,c_black,0)

//uncomment this for simple laser sight
//draw_line_width_colour(x,y,mouse_x,mouse_y,3,c1,c_black)
draw_set_blend_mode(bm_add)
for (i=0;i&lt;beams;i+=1)
{
    //beams are automatically drawn thinner if there is more than one of them.
   draw_path_gradient(0,0,path[i],seglength,width*(1-i/beams),c1,c2,(1-abs(weighting))*.5,weighting)
}
draw_reset()
//uncomment this to show the path being used
//draw_path(path,0,0,1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>39,39</point>
    <point>40,40</point>
  </PhysicsShapePoints>
</object>
