<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_green_enemy1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>par_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

type = 0;

bhpg_pattern_init(3,90,135,1,90,15,-0.25,1,30,4,16,16,32,32);

bhpg_bullet_init(bhpg_test_bullet,3,-0.05,1);

bullets_col = c_white;
spin_col = c_white;
spin_mod_col = c_white;
spin_reverse_col = c_white;
max_spin_spd_col = c_white;
fire_rate_col = c_white;
spread_col = c_white;
start_angle_col = c_white;
total_arrays_col = c_white;
array_spread_col = c_white;
bullet_object_col = c_white;
bullet_speed_col = c_white;
bullet_accel_col = c_white;
bullet_curve_col = c_white;
object_width_col = c_white;
object_height_col = c_white;
x_offset_col = c_white;
y_offset_col = c_white;

menu_choice = 0;
total_menu = 16;

image_speed = 0;

a_ang = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bhpg_pattern_step();

if (keyboard_check_pressed(vk_up)) {
    menu_choice -= 1;
}
if (keyboard_check_pressed(vk_down)) {
    menu_choice += 1;
}

if (menu_choice &lt; 0) {
    menu_choice = total_menu;
}
if (menu_choice &gt; total_menu) {
    menu_choice = 0;
}

switch (menu_choice) {
    case 0:
        bullets_col = c_yellow;
        spin_col = c_white;
        spin_mod_col = c_white;
        spin_reverse_col = c_white;
        max_spin_spd_col = c_white;
        fire_rate_col = c_white;
        spread_col = c_white;
        start_angle_col = c_white;
        total_arrays_col = c_white;
        array_spread_col = c_white;
        bullet_object_col = c_white;
        bullet_speed_col = c_white;
        object_width_col = c_white;
        object_height_col = c_white;
        x_offset_col = c_white;
        y_offset_col = c_white;
        if (keyboard_check_pressed(vk_left)) {
            bullets -= 1;
        }
        if (keyboard_check_pressed(vk_right)) {
            bullets += 1;
        }
        break;
        
    case 1:
        bullets_col = c_white;
        spin_col = c_white;
        spin_mod_col = c_white;
        spin_reverse_col = c_white;
        max_spin_spd_col = c_white;
        fire_rate_col = c_white;
        spread_col = c_yellow;
        start_angle_col = c_white;
        total_arrays_col = c_white;
        array_spread_col = c_white;
        bullet_object_col = c_white;
        bullet_speed_col = c_white;
        bullet_accel_col = c_white;
        bullet_curve_col = c_white;
        object_width_col = c_white;
        object_height_col = c_white;
        x_offset_col = c_white;
        y_offset_col = c_white;
        if (keyboard_check_pressed(vk_left)) {
            spread -= 5;
        }
        if (keyboard_check_pressed(vk_right)) {
            spread += 5;
        }
        break;
        
    case 2:
        bullets_col = c_white;
        spin_col = c_white;
        spin_mod_col = c_white;
        spin_reverse_col = c_white;
        max_spin_spd_col = c_white;
        fire_rate_col = c_white;
        spread_col = c_white;
        start_angle_col = c_white;
        total_arrays_col = c_yellow;
        array_spread_col = c_white;
        bullet_object_col = c_white;
        bullet_speed_col = c_white;
        bullet_accel_col = c_white;
        bullet_curve_col = c_white;
        object_width_col = c_white;
        object_height_col = c_white;
        x_offset_col = c_white;
        y_offset_col = c_white;
        if (keyboard_check_pressed(vk_left)) {
            total_arrays -= 1;
        }
        if (keyboard_check_pressed(vk_right)) {
            total_arrays += 1;
        }
        break;
        
    case 3:
        bullets_col = c_white;
        spin_col = c_white;
        spin_mod_col = c_white;
        spin_reverse_col = c_white;
        max_spin_spd_col = c_white;
        fire_rate_col = c_white;
        spread_col = c_white;
        start_angle_col = c_white;
        total_arrays_col = c_white;
        array_spread_col = c_yellow;
        bullet_object_col = c_white;
        bullet_speed_col = c_white;
        bullet_accel_col = c_white;
        bullet_curve_col = c_white;
        object_width_col = c_white;
        object_height_col = c_white;
        x_offset_col = c_white;
        y_offset_col = c_white;
        if (keyboard_check_pressed(vk_left)) {
            array_spread -= 5;
        }
        if (keyboard_check_pressed(vk_right)) {
            array_spread += 5;
        }
        break;
        
    case 4:
        bullets_col = c_white;
        spin_col = c_white;
        spin_mod_col = c_white;
        spin_reverse_col = c_white;
        max_spin_spd_col = c_white;
        fire_rate_col = c_white;
        spread_col = c_white;
        start_angle_col = c_yellow;
        total_arrays_col = c_white;
        array_spread_col = c_white;
        bullet_object_col = c_white;
        bullet_speed_col = c_white;
        bullet_accel_col = c_white;
        bullet_curve_col = c_white;
        object_width_col = c_white;
        object_height_col = c_white;
        x_offset_col = c_white;
        y_offset_col = c_white;
        if (keyboard_check_pressed(vk_left)) {
            start_angle -= 5;
        }
        if (keyboard_check_pressed(vk_right)) {
            start_angle += 5;
        }
        break;
        
    case 5:
        bullets_col = c_white;
        spin_col = c_yellow;
        spin_mod_col = c_white;
        spin_reverse_col = c_white;
        max_spin_spd_col = c_white;
        fire_rate_col = c_white;
        spread_col = c_white;
        start_angle_col = c_white;
        total_arrays_col = c_white;
        array_spread_col = c_white;
        bullet_object_col = c_white;
        bullet_speed_col = c_white;
        bullet_accel_col = c_white;
        bullet_curve_col = c_white;
        object_width_col = c_white;
        object_height_col = c_white;
        x_offset_col = c_white;
        y_offset_col = c_white;
        if (keyboard_check_pressed(vk_left)) {
            spin -= 5;
        }
        if (keyboard_check_pressed(vk_right)) {
            spin += 5;
        }
        break;
        
    case 6:
        bullets_col = c_white;
        spin_col = c_white;
        spin_mod_col = c_yellow;
        spin_reverse_col = c_white;
        max_spin_spd_col = c_white;
        fire_rate_col = c_white;
        spread_col = c_white;
        start_angle_col = c_white;
        total_arrays_col = c_white;
        array_spread_col = c_white;
        bullet_object_col = c_white;
        bullet_speed_col = c_white;
        bullet_accel_col = c_white;
        bullet_curve_col = c_white;
        object_width_col = c_white;
        object_height_col = c_white;
        x_offset_col = c_white;
        y_offset_col = c_white;
        if (keyboard_check_pressed(vk_left)) {
            spin_mod -= 0.1;
        }
        if (keyboard_check_pressed(vk_right)) {
            spin_mod += 0.1;
        }
        break;
        
    case 7:
        bullets_col = c_white;
        spin_col = c_white;
        spin_mod_col = c_white;
        spin_reverse_col = c_yellow;
        max_spin_spd_col = c_white;
        fire_rate_col = c_white;
        spread_col = c_white;
        start_angle_col = c_white;
        total_arrays_col = c_white;
        array_spread_col = c_white;
        bullet_object_col = c_white;
        bullet_speed_col = c_white;
        bullet_accel_col = c_white;
        bullet_curve_col = c_white;
        object_width_col = c_white;
        object_height_col = c_white;
        x_offset_col = c_white;
        y_offset_col = c_white;
        if (keyboard_check_pressed(vk_left) || keyboard_check_pressed(vk_right)) {
            spin_reverse = !spin_reverse;
        }
        break;
        
    case 8:
        bullets_col = c_white;
        spin_col = c_white;
        spin_mod_col = c_white;
        spin_reverse_col = c_white;
        max_spin_spd_col = c_yellow;
        fire_rate_col = c_white;
        spread_col = c_white;
        start_angle_col = c_white;
        total_arrays_col = c_white;
        array_spread_col = c_white;
        bullet_object_col = c_white;
        bullet_speed_col = c_white;
        bullet_accel_col = c_white;
        bullet_curve_col = c_white;
        object_width_col = c_white;
        object_height_col = c_white;
        x_offset_col = c_white;
        y_offset_col = c_white;
        if (keyboard_check_pressed(vk_left)) {
            max_spin_spd -= 5;
        }
        if (keyboard_check_pressed(vk_right)) {
            max_spin_spd += 5;
        }
        break;
        
    case 9:
        bullets_col = c_white;
        spin_col = c_white;
        spin_mod_col = c_white;
        spin_reverse_col = c_white;
        max_spin_spd_col = c_white;
        fire_rate_col = c_yellow;
        spread_col = c_white;
        start_angle_col = c_white;
        total_arrays_col = c_white;
        array_spread_col = c_white;
        bullet_object_col = c_white;
        bullet_speed_col = c_white;
        bullet_accel_col = c_white;
        bullet_curve_col = c_white;
        object_width_col = c_white;
        object_height_col = c_white;
        x_offset_col = c_white;
        y_offset_col = c_white;
        if (keyboard_check_pressed(vk_left)) {
            fire_rate -= 1;
        }
        if (keyboard_check_pressed(vk_right)) {
            fire_rate += 1;
        }
        break;
    
    case 10:
        bullets_col = c_white;
        spin_col = c_white;
        spin_mod_col = c_white;
        spin_reverse_col = c_white;
        max_spin_spd_col = c_white;
        fire_rate_col = c_white;
        spread_col = c_white;
        start_angle_col = c_white;
        total_arrays_col = c_white;
        array_spread_col = c_white;
        bullet_speed_col = c_yellow;
        bullet_accel_col = c_white;
        bullet_curve_col = c_white;
        object_width_col = c_white;
        object_height_col = c_white;
        x_offset_col = c_white;
        y_offset_col = c_white;
        if (keyboard_check_pressed(vk_left)) {
            bullet_speed -= 1;
        }
        if (keyboard_check_pressed(vk_right)) {
            bullet_speed += 1;
        }
        break;
    case 11:
        bullets_col = c_white;
        spin_col = c_white;
        spin_mod_col = c_white;
        spin_reverse_col = c_white;
        max_spin_spd_col = c_white;
        fire_rate_col = c_white;
        spread_col = c_white;
        start_angle_col = c_white;
        total_arrays_col = c_white;
        array_spread_col = c_white;
        bullet_speed_col = c_white;
        bullet_accel_col = c_yellow;
        bullet_curve_col = c_white;
        object_width_col = c_white;
        object_height_col = c_white;
        x_offset_col = c_white;
        y_offset_col = c_white;
        if (keyboard_check_pressed(vk_left)) {
            bullet_accel -= 0.1;
        }
        if (keyboard_check_pressed(vk_right)) {
            bullet_accel += 0.1;
        }
        break;
    case 12:
        bullets_col = c_white;
        spin_col = c_white;
        spin_mod_col = c_white;
        spin_reverse_col = c_white;
        max_spin_spd_col = c_white;
        fire_rate_col = c_white;
        spread_col = c_white;
        start_angle_col = c_white;
        total_arrays_col = c_white;
        array_spread_col = c_white;
        bullet_speed_col = c_white;
        bullet_accel_col = c_white;
        bullet_curve_col = c_yellow;
        object_width_col = c_white;
        object_height_col = c_white;
        x_offset_col = c_white;
        y_offset_col = c_white;
        if (keyboard_check_pressed(vk_left)) {
            bullet_curve -= 1;
        }
        if (keyboard_check_pressed(vk_right)) {
            bullet_curve += 1;
        }
        break;
    case 13:
        bullets_col = c_white;
        spin_col = c_white;
        spin_mod_col = c_white;
        spin_reverse_col = c_white;
        max_spin_spd_col = c_white;
        fire_rate_col = c_white;
        spread_col = c_white;
        start_angle_col = c_white;
        total_arrays_col = c_white;
        array_spread_col = c_white;
        bullet_speed_col = c_white;
        bullet_accel_col = c_white;
        bullet_curve_col = c_white;
        object_width_col = c_yellow;
        object_height_col = c_white;
        x_offset_col = c_white;
        y_offset_col = c_white;
        if (keyboard_check_pressed(vk_left)) {
            object_width -= 1;
        }
        if (keyboard_check_pressed(vk_right)) {
            object_width += 1;
        }
        break;
    case 14:
        bullets_col = c_white;
        spin_col = c_white;
        spin_mod_col = c_white;
        spin_reverse_col = c_white;
        max_spin_spd_col = c_white;
        fire_rate_col = c_white;
        spread_col = c_white;
        start_angle_col = c_white;
        total_arrays_col = c_white;
        array_spread_col = c_white;
        bullet_speed_col = c_white;
        bullet_accel_col = c_white;
        bullet_curve_col = c_white;
        object_width_col = c_white;
        object_height_col = c_yellow;
        x_offset_col = c_white;
        y_offset_col = c_white;
        if (keyboard_check_pressed(vk_left)) {
            object_height -= 1;
        }
        if (keyboard_check_pressed(vk_right)) {
            object_height += 1;
        }
        break;
    case 15:
        bullets_col = c_white;
        spin_col = c_white;
        spin_mod_col = c_white;
        spin_reverse_col = c_white;
        max_spin_spd_col = c_white;
        fire_rate_col = c_white;
        spread_col = c_white;
        start_angle_col = c_white;
        total_arrays_col = c_white;
        array_spread_col = c_white;
        bullet_speed_col = c_white;
        bullet_accel_col = c_white;
        bullet_curve_col = c_white;
        object_width_col = c_white;
        object_height_col = c_white;
        x_offset_col = c_yellow;
        y_offset_col = c_white;
        if (keyboard_check_pressed(vk_left)) {
            x_offset -= 1;
        }
        if (keyboard_check_pressed(vk_right)) {
            x_offset += 1;
        }
        break;
    case 16:
        bullets_col = c_white;
        spin_col = c_white;
        spin_mod_col = c_white;
        spin_reverse_col = c_white;
        max_spin_spd_col = c_white;
        fire_rate_col = c_white;
        spread_col = c_white;
        start_angle_col = c_white;
        total_arrays_col = c_white;
        array_spread_col = c_white;
        bullet_speed_col = c_white;
        bullet_accel_col = c_white;
        bullet_curve_col = c_white;
        object_width_col = c_white;
        object_height_col = c_white;
        x_offset_col = c_white;
        y_offset_col = c_yellow;
        if (keyboard_check_pressed(vk_left)) {
            y_offset -= 1;
        }
        if (keyboard_check_pressed(vk_right)) {
            y_offset += 1;
        }
        break;
}

if (bullets &lt; 1) {
    bullets = 1;
}

if (fire_rate &lt; 0) {
    fire_rate = 0;
}

if (total_arrays &lt; 1) {
    total_arrays = 1;
}

if (start_angle &gt; 359) {
    start_angle = 0;
}

if (start_angle &lt; 0) {
    start_angle = 355;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_left);

draw_set_color(bullets_col);
draw_text(8,8,"bullets per array: " + string(bullets));

draw_set_color(spread_col);
draw_text(8,24,"individual array spread: " + string(spread));

draw_set_color(total_arrays_col);
draw_text(8,56,"total bullet arrays: " + string(total_arrays));

draw_set_color(array_spread_col);
draw_text(8,72,"total array spread: " + string(array_spread));

draw_set_color(start_angle_col);
draw_text(8,104,"start angle: " + string(start_angle));

draw_set_color(spin_col);
draw_text(8,120,"current spin speed: " + string(spin));

draw_set_color(spin_mod_col);
draw_text(8,136,"spin speed change rate: " + string(spin_mod));

draw_set_color(spin_reverse_col);
draw_text(8,152,"spin reversal: " + string(spin_reverse));

draw_set_color(max_spin_spd_col);
draw_text(8,168,"max spin speed: " + string(max_spin_spd));

draw_set_color(fire_rate_col);
draw_text(8,200,"fire rate: " + string(fire_rate));

draw_set_color(bullet_speed_col);
draw_text(8,216,"bullet speed: " + string(bullet_speed));

draw_set_color(bullet_accel_col);
draw_text(8,232,"bullet acceleration: " + string(bullet_accel));

draw_set_color(bullet_curve_col);
draw_text(8,248,"bullet curve: " + string(bullet_curve));

draw_set_color(object_width_col);
draw_text(8,280,"object width: " + string(object_width));

draw_set_color(object_height_col);
draw_text(8,296,"object height: " + string(object_height));

draw_set_color(x_offset_col);
draw_text(8,312,"x offset: " + string(x_offset));

draw_set_color(y_offset_col);
draw_text(8,328,"y offset: " + string(y_offset));


draw_set_color(c_white);
draw_text(8,360,"bullets on screen: " + string(instance_number(bhpg_test_bullet)));
draw_text(8,376,"fps: " + string(fps));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

draw_set_halign(fa_left);

draw_set_color(bullets_col);
draw_text(8,8,"bullets per array: " + string(bullets));

draw_set_color(spread_col);
draw_text(8,24,"individual array spread: " + string(spread));

draw_set_color(total_arrays_col);
draw_text(8,56,"total bullet arrays: " + string(total_arrays));

draw_set_color(array_spread_col);
draw_text(8,72,"total array spread: " + string(array_spread));

draw_set_color(start_angle_col);
draw_text(8,104,"start angle: " + string(start_angle));

draw_set_color(spin_col);
draw_text(8,120,"current spin speed: " + string(spin));

draw_set_color(spin_mod_col);
draw_text(8,136,"spin speed change rate: " + string(spin_mod));

draw_set_color(spin_reverse_col);
draw_text(8,152,"spin reversal: " + string(spin_reverse));

draw_set_color(max_spin_spd_col);
draw_text(8,168,"max spin speed: " + string(max_spin_spd));

draw_set_color(fire_rate_col);
draw_text(8,200,"fire rate: " + string(fire_rate));

draw_set_color(bullet_speed_col);
draw_text(8,216,"bullet speed: " + string(bullet_speed));

draw_set_color(bullet_accel_col);
draw_text(8,232,"bullet acceleration: " + string(bullet_accel));

draw_set_color(bullet_curve_col);
draw_text(8,248,"bullet curve: " + string(bullet_curve));

draw_set_color(object_width_col);
draw_text(8,280,"object width: " + string(object_width));

draw_set_color(object_height_col);
draw_text(8,296,"object height: " + string(object_height));

draw_set_color(x_offset_col);
draw_text(8,312,"x offset: " + string(x_offset));

draw_set_color(y_offset_col);
draw_text(8,328,"y offset: " + string(y_offset));


draw_set_color(c_white);
draw_text(8,360,"bullets on screen: " + string(instance_number(bhpg_test_bullet)));
draw_text(8,376,"fps: " + string(fps));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>223</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_current_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
