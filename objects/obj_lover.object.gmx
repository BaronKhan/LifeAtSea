<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_lover</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>obj_physics</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialise state
event_inherited();
state = LOVER_SCARED;
if (room == room_tutorial_3) {
  state = LOVER_CRAZY;
} else if (room == room_ending) {
  state = LOVER_ENDING;
}

rotate = false;
rot_angle = 270
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Y-Offset
yy = 0
y_add = false
temp_y = 0

//Wiggle offset
wiggle_offset = 0;
wiggle_add = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// setting up the particle system

_systemabc = part_system_create()
part_system_depth(_systemabc,0)
_particleabc = part_type_create()
part_type_shape(_particleabc,pt_shape_disk)
part_type_size(_particleabc,0.10,0.20,0,0)
part_type_scale(_particleabc,1,1)
part_type_orientation(_particleabc,90,90,0,0,0)
part_type_color3(_particleabc,65535,4235519,255)
part_type_alpha3(_particleabc,1,1,0)
part_type_blend(_particleabc,0)
part_type_life(_particleabc,20,30)
part_type_speed(_particleabc,1,2,0,0)
part_type_direction(_particleabc,45,135,0,0)
part_type_gravity(_particleabc,0.01,90)
part_type_sprite(_particleabc, spr_heart, 0, true, 0);
_emitterabc = part_emitter_create(_systemabc)
part_emitter_region(_systemabc,_emitterabc,x-16,x+16,y-16,y-20,ps_shape_ellipse,1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>part_system_clear(_systemabc)
part_system_destroy(_systemabc)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state = LOVER_CRAZY;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update state
if (y &gt; 496) {
  gravity = 0;
  if (state == LOVER_SCARED) {
    if (instance_number(obj_enemy_shark) &gt; 0) {
      hspeed = obj_enemy_shark.hspeed;
      y = tune_value(y, obj_enemy_shark.y+50, abs(y-obj_enemy_shark.y));
      if (obj_enemy_shark.state == SHARK_ATTACK) {
        state = LOVER_FOLLOW;
      }
    } else {
      state = LOVER_FOLLOW;
    }
  } else if (state == LOVER_FOLLOW) {
    if (distance_to_object(obj_ship) &gt; 4) {
      move_towards_point(obj_ship.x, obj_ship.y, 4);
    } else {
      hspeed = tune_value(hspeed, 0, 1);
      vspeed = tune_value(vspeed, 0, 1);
    }
    if (instance_number(par_enemy) &lt;= 0 &amp;&amp; alarm[0] &lt;= -1) {
      alarm[0] = room_speed*2;
    }
  } else if (state == LOVER_CRAZY) {
    if (distance_to_object(obj_ship) &gt; 64) {
      move_towards_point(obj_ship.x, obj_ship.y, 4);
    } else {
      hspeed = tune_value(hspeed, 0, 0.5);
      vspeed = tune_value(vspeed, 0, 0.5);
    }
  } else if (state == LOVER_KIDNAPPED) {
    x = tune_value(x, obj_bad.x-8, max(abs(x-obj_bad.x), 5));
    y = tune_value(y, obj_bad.y+8, max(abs(y-obj_bad.y), 5));
  } else if (state == LOVER_ENDING) {
    var centre_x = view_xview[0] + (view_wview[0]/2);
    var centre_y = view_yview[0] + (view_hview[0]/2);
    if (!rotate) {
      move_towards_point(x, centre_y, 3);
      if (point_distance(x,y, x, centre_y) &lt; 120) {
        y = centre_y+120;
        rotate = true;
        hspeed = 0;
        vspeed = 0;
      }
    } else {
      //var centre_dir = point_direction(x, y, centre_x, centre_y);
      //hspeed = lengthdir_x(3, centre_dir-90);
      //vspeed = lengthdir_y(3, centre_dir-90);
      x = centre_x+lengthdir_x(120, rot_angle);
      y = centre_y+lengthdir_y(120, rot_angle);
      rot_angle = (rot_angle + 2) % 360;
    }
  }
} else {
  gravity = 0.08;
  gravity_direction = 270;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create y-offset for the floaty effect and wiggle-offset when moving
if speed &lt; 0.5
{
  if y_add = false
   yy -= 0.1
  if y_add = true
   yy += 0.1

  if yy &gt; 4
  {
   yy = 4
   y_add = false
  }

  if yy &lt; -4 
  {
   yy = -4
   y_add = true
  }
 
  if wiggle_offset != 0
  {
    if wiggle_offset &gt; 0
      wiggle_offset -= 0.1
    else
      wiggle_offset += 0.1
  }
}
else
{
  if yy != 0
  {
    if yy &gt; 0
      yy -= 0.1
    else
      yy += 0.1
  }
  
  if (y &gt; 496 &amp;&amp; speed &gt; 0.5)
  {
    if wiggle_add = false
      wiggle_offset -= 0.2
    if wiggle_add = true
      wiggle_offset += 0.2
  
    if wiggle_offset &gt; 2
    {
      wiggle_offset = 2
      wiggle_add = false
    }
  
    if wiggle_offset &lt; -2
    {
      wiggle_offset = -2
      wiggle_add = true
    }
  }
  /*else
  {
    if wiggle_offset != 0
    {
      if wiggle_offset &gt; 0
        wiggle_offset -= 0.2
      else
        wiggle_offset += 0.2
    }
  }*/

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update physics
xsp = hspeed;
ysp = vspeed;
update_physics();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create tears
if ((state == LOVER_SCARED || state == LOVER_FOLLOW || state == LOVER_KIDNAPPED)
      &amp;&amp; alarm[0] &lt;= -1)
{
 switch(irandom_range(0,20))
 {
  case 0:
  with (instance_create(x+random_range(-4,4),y-5,obj_tear))
  {
   direction = random_range(180,359)
   gravity = 0.1
   hspeed = random_range(-3,3)
  }
    case 1:
  with (instance_create(x+random_range(-4,4),y-5,obj_tear))
  {
   direction = random_range(0,179)
   gravity = 0.1
   hspeed = random_range(-3,3)
  }
  break;
 }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Begin particle stream
if (state == LOVER_CRAZY) {
  part_emitter_region(_systemabc,_emitterabc,x-16,x+16,y-16,y-20,ps_shape_ellipse,1)
  part_emitter_stream(_systemabc,_emitterabc,_particleabc,1);
} else if (state == LOVER_KIDNAPPED) {
  part_emitter_destroy(_systemabc, _emitterabc);
}
// Code produced by Aerohawk ID 1 from wormintheworks.com

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>part_system_clear(_systemabc)
part_system_destroy(_systemabc)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw player, trail and eyes
x_wiggle_offset = lengthdir_x(wiggle_offset, image_angle+90)
y_wiggle_offset = lengthdir_y(wiggle_offset, image_angle+90)

player_colour = c_white;

draw_trail_bullet(20,22,player_colour,-1,1,1, x_wiggle_offset, y_wiggle_offset+yy);

draw_sprite_ext(sprite_index, image_index, x+x_wiggle_offset, y+y_wiggle_offset+yy, image_xscale, image_yscale, image_angle,image_blend, image_alpha);

draw_set_blend_mode(bm_normal)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>2</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0</PhysicsObjectFriction>
  <PhysicsObjectAwake>0</PhysicsObjectAwake>
  <PhysicsObjectKinematic>-1</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>35,35</point>
    <point>13,35</point>
  </PhysicsShapePoints>
</object>
