<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///READ ME FIRST

/*
  INSTRUCTIONS ON HOW TO USE

  ObSaveLoad shows you how to securely save gameplay and other important variables out to a file and read 
  them back in on the next run of the game. It also demonstrates a simple way of adding an extra layer of 
  security, were someone able to hack the encrypted save file. You will then have access to the global 
  variables created in the LoadGame script.
  
  As an added bonus, it also shows how to use the DS accessor for a DS Map, as without using this direct 
  method of accessing the variables the code would get considerably longer.

  
  TO TEST
  
  Simply start the game and you'll see the default values are drawn. The two counters should go up one per second.
  You'll be prompted to add in your name. Please do so. You'll see it it then drawn to the screen also.
  When you're ready, press and release the spacebar. This will save your current values. You'll see it tells you the file now exists.
  When you're ready, close the game window.
  Run the game again and this time it will load in your saved information and give you a different display.
  If you press space again it will reset the loaded flag and you cann carry on incrementing.
  Spacebar again will save your new values.
  
  
  TO USE IN YOUR OWN PROJECT
  
  1) GGS
  
  You should copy the Game ID found on the General page of Global Game Settings and paste it into SaveGame and LoadGame.
  Failing to do this will mean you're using the demo project's game ID, which other users of ObSaveLoad might also have 
  forgotten to replace, meaning your save file validation will be a tiny bit easier to break, should someone manage to 
  get past the encryption. It's unlikely to be an issue, but please don't forget to update the value.
  
  2) LoadGame script
  
  The end of the script will of course need customising to match the variables you want to save in your own project. It is
  suggested that you leave playerName, validation, and loaded as they are, otherwise you will need to modify a lot of the 
  framework code to fit the names you've chosen.
  
  3) SaveGame script
  
  Here, unless you changed the names for the three variables we just suggested you don't change, you'll only need to customise
  a variable or two to match the names of a couple of integer variables you're saving-out in your own project. These are the 
  playerInt += ...; lines about halfway down the code.
  
  4) objSaveLoad
  
  This object is for the purposes of demoing the framework, however you might wish to use the object in your own project and 
  just customise the variable names to match your own. If you do this, ensure that the object in still set as persistent and is
  created in the first room of your game (or where you wish to load the data anyway). You might also want to make it the first
  object created in the room editor's instances list.
  
  
  **** DISCLAIMERS ****
  Errors will be rectified as soon as they are noticed/pointed out, and a new version will be released. It is expected that you 
  will update your installed copy to match the current store version. Obviously, be aware that if GameMaker has a bug in its 
  DS map functions or the accessor or the secure save/load functions, this framework will suffer also, until such time as YoYo 
  fixes Studio.

  However, as you have the source code now, ObSkewer Games cannot be held liable for any product delays/costs/losses/issues you 
  may have in integrating the system. You are free to change the code to your needs, as ObSaveLoad is intended as a functional 
  educational tool.

  It is of course recommended that you remove/protect all demo/testing/debug functionality which might show sensitive information
  before you ship the game. You failing to do so will not hold ObSkewer Games in any liability. Debug text is shown for developer
  education only.


  **** RATE AND REVIEW!! ****
  Please remember to rate and review ObSaveLoad on the store once you've got a grip on how the system works. If you wouldn't mind 
  mentioning your game which uses the framework at the same time, that would be lovely. Your game may then be named on the 
  ObSaveLoad homepage at http://www.obskewer.co.uk/tools/obsaveload but feel free to request this doesn't happen.


  **** REPORTING ISSUES ****
  For reporting FRAMEWORK bugs, or maybe to say thanks, please use gmarket@obskewer.co.uk or the contact form on the Narketplace.

  This is not to be used to ask for general advice on integrating the product in your game - any such e-mails will be deleted, 
  as no free support is included in your purchase price.
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Establish our starting variable values

LoadGame();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>room_speed</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>room_speed</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Increment our score counters

if (!global.saveData[? "loaded"])
{ 
    // Update to 1.4 Beta or these next two lines won't work, instead you'll get a compiler error.
    global.saveData[? "counter1"]++;
    global.saveData[? "counter2"]++;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>room_speed</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ask for the player's name

/*
   Create a new variable to hold the ID for the async dialogue, then show the dialogue.
*/

if (!global.saveData[? "loaded"]) { global.nameDiag = get_string_async("Please enter your name", ""); }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Process the player name dialogue

/*
  Here we check the DS map returned in this event ("async_load") and query if its ID matches the event we want to check,
  is the status okay (i.e., the player actually clicked the "OK" button on the dialogue), and that it has a non-blank result.
  As long as it does, we'll use the string they typed as the player's name.
  
  Note that the name is unedited - if they wrote some value you don't want to accept, you'll need to handle editing this.
*/

if (async_load[? "id"] == global.nameDiag) // We only care about the name dialogue
{
    if ((async_load[? "status"]) &amp;&amp; (async_load[? "result"] != "")) // They clicked OK and they have typed something in
    {
        global.saveData[? "playerName"] = async_load[? "result"]; // So set what they typed in as our name
    }
    else
    {
        global.nameDiag = get_string_async("Please enter a valid name", ""); // Make them try again
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw our variables to the screen

/*
  If there is a save file already, for the purposes of this demo we'll just draw a silly string which proves the data got saved okay.
  If there isn't a save file (i.e., this is us testing the demo) just show the current values for our testing variables.
*/

if (global.saveData[? "loaded"])
{
    var prevScore = global.saveData[? "counter1"] + global.saveData[? "counter2"];
    
    // Write out some string which just proves our data saved okay
    draw_text(20, 20, global.saveData[? "stringTwo"] + ", " + global.saveData[? "playerName"] + ".#Last time you scored " + string(prevScore) + ".##" + global.saveData[? "stringOne"]);
}
else
{
    // Draw our current values
    draw_text(20, 20, global.saveData[? "playerName"]);
    draw_text(20, 60, string(global.saveData[? "counter1"]));
    draw_text(20, 80, string(global.saveData[? "counter2"]));
    draw_text(20, 100, global.saveData[? "stringOne"]);
    draw_text(20, 120, global.saveData[? "stringTwo"]);
    
    if (file_exists("saveData.bin")) { draw_text(20, 200, "Save exists"); }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save our values

SaveGame();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
