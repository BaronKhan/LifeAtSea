<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_water</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Generate Water Across Room
    waterwidth = room_width + 100
    //waterheight = room_height - y;
    waterheight = 400
    if (global.lower_performance) {
      nodewidth = 48;
    }
    else {
      nodewidth = 16; //as this is lowered the water waves will get thinner but more precise, and more of them
    }
    nodes = floor(waterwidth/nodewidth)+1;

    //physics variables
    spring = 2; //higher numbers will make the liquid act thicker
    fricdiv = 2; //higher numbers will be less dynamic
    
    //individual nodes
    for (i = 0; i &lt; nodes; i += 1)
    {
        yy[i] = y;
        ysp[i] = 0;
        frc[i] = (ysp[i])/(room_speed/fricdiv);
    }
    

move = 0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create wave generator
if (room == room_title) {
  instance_create(0,390,obj_wavecreate)
} else {
  instance_create(0,470,obj_wavecreate)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create bubbles when room begins
var max_depth = room_height;

if (room == room_title) {
 max_depth = 650;
}
if (room != room_coop_test) {
  repeat(irandom_range(5,10))
  {
   instance_create(random(room_width),random_range(600,max_depth),obj_bubble)
  }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create water vfx
if (global.use_vfx) {
  instance_create(view_xview[0],view_yview[0],obj_vfx);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Add fish when room begins

if (/*!global.lower_performance &amp;&amp;*/ room != room_title &amp;&amp; room != room_ending &amp;&amp; room != room_survival) {
  repeat(irandom_range(0, 3)) {
    var leader_x = random_range(600, room_height-400);
    var leader_y = random_range(0, room_width);
    instance_create(leader_x, leader_y, o_leader);
    repeat(irandom_range(5, 15)) {
      instance_create(leader_x+random_range(-64, 64), leader_y+random_range(-64, 64), o_fish);
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update Water
if (view_yview[0] &lt;= y+waterwidth+16) {

    var drop; 
    for (i = 0; i &lt; nodes; i += 1)
    {
        if ((i-1 &gt; -1) &amp;&amp; (i+1 &lt; nodes))
        {
            //movement
            var node_xx = x+(i*nodewidth);
            if (node_xx &gt; view_xview[0]-200 &amp;&amp; node_xx &lt; view_xview[0]+view_wview[0]+200) {
              ysp[i] += ((((yy[i-1]-yy[i])+(yy[i+1]-yy[i]))+(ysp[i-1]+ysp[i+1])))/(room_speed*spring);
              ysp[i] += (y-yy[i])/(room_speed*spring);
              frc[i] = (ysp[i])/(room_speed/fricdiv);
              ysp[i] -= frc[i];
              
              //collision
              
              drop = collision_circle(x+(i*nodewidth), yy[i], nodewidth/2, obj_physics, 0, 1);
              if (drop)
              {
                  if (abs(drop.ysp) &gt; 0.5)
                  {
                      ysp[i] = divide(drop.ysp/4, max(1, point_distance(drop.x, 0, x+(i*nodewidth), 0)/16));
                  }
                  if instance_number(obj_ship) &gt; 0
                  {
                   if instance_number(obj_splash) == 0 &amp;&amp; obj_ship.speed &gt; 3.8 &amp;&amp; obj_ship.y &lt; 500 &amp;&amp; obj_ship.y &gt; 492
                   {
                      instance_create(i*nodewidth,yy[i],obj_splash)
                   }
                  }
              }
  
             // if random(room_speed*5) &lt; 1
             // {
              // yy[i] += 1
             // }
              //actually move the node
              if (view_yview[0] &lt; y + 400) {
                if !(collision_circle(x+(i*nodewidth), yy[i], nodewidth/2, obj_wavecreate, 0, 1) &amp;&amp; ((ysp[i] &gt; 2 &amp;&amp; (yy[i] &lt; -4 || yy[i] &gt; 4)) || (ysp[i] &lt; -2 &amp;&amp; (yy[i] &gt; 4 || yy[i] &lt; -4)))) 
                {
                 yy[i] += ysp[i];
                }
              }
            }
        }
    }
    
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Bubbles
if random(300) &lt; 1
{
  if (room != room_coop_test || instance_number(obj_client) &lt;= 0)) {
    instance_create(random(room_width),room_height+40,obj_bubble)
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Water
if (!global.use_vfx) {
    //draw the water's body
    //draw_set_color(18577);
    draw_set_colour(make_colour_rgb(0,30,30))
    
    //OLD BLEND
    //draw_set_alpha(1);
    //draw_set_blend_mode(bm_subtract);
    
    //NEW BLEND
    draw_set_alpha(0.1)
    
    if (view_yview[0] &lt; y+waterheight+64) {
      draw_primitive_begin(pr_trianglestrip);
      if (instance_number(obj_ship) &lt; 1 || obj_ship.y &lt; waterwidth+600) {
        for (i = 0; i &lt; nodes; i += 1)
        {
       // gradient += 2
        //draw_set_color(18577+( sin(degtorad(gradient))*50 ) );
            var node_xx = x+(i*nodewidth);
            if (node_xx &gt;= view_xview[0]-nodewidth*2 &amp;&amp;
              node_xx &lt;= view_xview[0]+view_wview[0]+nodewidth*2)
            {
              draw_vertex(node_xx, yy[i]);
              draw_vertex(node_xx, max(yy[i], min(y+waterheight, view_yview[0]+view_hview[0]+16)));
            }
            //draw_line_width(x+(i*nodewidth),y+399,x+(i*nodewidth),room_height,nodewidth)
        }
      }
      draw_primitive_end();
    }
    
    if (view_yview[0]+view_hview[0] &gt; y+waterheight-64) {
      draw_rectangle(x,y+waterheight,x+waterwidth,min(view_yview[0]+view_hview[0]+16,room_height),false)
    }
}
    
    draw_set_alpha(1);
    draw_set_blend_mode(bm_normal);
    draw_set_color(c_white);
    
    //draw the water's surface
    /*
    var pth, wid, stp, stp_i, xt, xt_i, sgn, a, a_i, x1, y1, x2, y2, i, px, py, nx, ny, vert_count;
    
    wid = 4; //half the width of water surface
    
    px = x;
    py = yy[0];
    
    vert_count = 0;
    draw_primitive_begin_texture(pr_trianglestrip, sprite_get_texture(sprWaterTop, 0));
    
    for (i = 0; i &lt; nodes; i += 1) 
    {

        nx = x+(i*nodewidth);
        ny = yy[i];

        dir = point_direction(px, py, nx, ny);
        dx = lengthdir_x(wid, dir+90);
        dy = lengthdir_y(wid, dir+90);

        xt = (i-1)/nodes;
        draw_vertex_texture(px+dx, py+dy, xt, 0);
        draw_vertex_texture(px-dx, py-dy, xt, 1);
        px = nx;
        py = ny;
    }
    
    draw_vertex_texture(px+dx, py+dy, xt, 0);
    draw_vertex_texture(px-dx, py-dy, xt, 1);
    draw_primitive_end();
    */
//draw_set_color(c_black)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
