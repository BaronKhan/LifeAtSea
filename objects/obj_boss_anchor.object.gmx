<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_boss_anchor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>par_boss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init boss stuff
event_inherited();
max_hp = 3000
hp = 3000
hit = false
can_hit = true
hp_alpha = 1
oxygen_decrease = 50;

// get shader constant handle
//colour_to_find = shader_get_uniform(shader_hit_flash, "f_Colour1");

bhpg_pattern_init(4,360,135,13,180,0,0,0,0,room_speed,1,1,0,0);
bhpg_bullet_init(obj_bullet_enemy,3,0.15,0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///FSM
state = EEL_IDLE;
face_dir = 1;
shooting_shock = false;

image_angle = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///On dead
instance_destroy();
with(instance_create(x,y,obj_star_spawner)) { n = 400; }
instance_create(x,y,obj_explode_256);
if (instance_number(obj_ship) &gt; 0) {
 obj_ship.combo_count += 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change to falling state
state = EEL_FALLING;
vspeed = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change state
if (state == EEL_IDLE) {
  if (random(1) &lt; 0.75) {
    if (face_dir==1) {
      state = EEL_LEAVE_RIGHT;
    } else {
      state = EEL_LEAVE_LEFT;
    }
  } else {
    state = EEL_RISING;
  }
} else if (state == EEL_LEAVE_LEFT) {
  if (random(2) &lt; 1.5) {
    state = EEL_FAST_RIGHT;
  } else {
    state = EEL_CROSS;
    face_dir = 1;
    hspeed = 14;
  }
  x = -100;
} else if (state == EEL_LEAVE_RIGHT) {
  if (random(2) &lt; 1.5) {
    state = EEL_FAST_LEFT;
  } else {
    state = EEL_CROSS;
    face_dir = -1;
    hspeed = -14;
  }
  x = room_width + 100;
} else if (state == EEL_CROSS) {
  if (face_dir == 1) {
    state = EEL_LEAVE_RIGHT;
  } else {
    state = EEL_LEAVE_LEFT;
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DO NOT USE!!! Used as shooting timer
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Can hit now
can_hit = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hit timer
hit = false
alarm[1] = 2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if dead
if (hp &lt; 1 &amp;&amp; state != EEL_DIE)
{
 hp = 0;
 state = EEL_DIE;
 alarm[5] = room_speed*3;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update state
switch(state) {
  case EEL_IDLE:
    hspeed = tune_value(hspeed, 2*face_dir, 0.2);
    vspeed = tune_value(vspeed, 0, 0.5);
    x_offset = -face_dir*96;
    direction = 90-(90*sign(hspeed));
    if (x &gt; room_width &amp;&amp; hspeed &gt; 0) {
      x = room_width;
      face_dir = -1;
      hspeed = -hspeed;
    } else if (x &lt; 0 &amp;&amp; hspeed &lt; 0) {
      x = 0;
      face_dir = 1;
      hspeed = -hspeed;
    }
    if (alarm[3] &lt;= -1) {
      alarm[3] = room_speed*random_range(3, 5)
    }
    bhpg_pattern_step();
    break;
  case EEL_LEAVE_RIGHT:
    face_dir = 1;
    direction = 0;
    if (x &gt; room_width+600 &amp;&amp; alarm[3] &lt;= -1) {
      if (alarm[3] &lt;= -1) {
        alarm[3] = room_speed/2;
      }
      y = min(max(obj_ship.y, 496), room_width - 128);
    } else {
      hspeed = tune_value(hspeed, 5, 0.2);
    }
    break;
  case EEL_LEAVE_LEFT:
    direction = 180;
    face_dir = -1;
    if (x &lt; -600) {
      if (alarm[3] &lt;= -1) {
        alarm[3] = room_speed/2;
      }
      hspeed = tune_value(hspeed, 0, 0.5);
      y = min(max(obj_ship.y, 496), room_width - 128);
    } else {
      hspeed = tune_value(hspeed, -5, 0.2);
    }
    break;
  case EEL_FAST_RIGHT:
    direction = 0;
    face_dir = 1;
    hspeed = 20;
    if (x &gt; obj_ship.x + 64) {
      state = EEL_IDLE;
    }
    break;
  case EEL_FAST_LEFT:
    direction = 180;
    face_dir = -1;
    hspeed = -20;
    if (x &lt; obj_ship.x - 64) {
      state = EEL_IDLE;
    }
    break;
  case EEL_CROSS:
    var dir = point_direction(x,y,obj_ship.x,obj_ship.y);
    if (x &lt; view_xview[0] - 300 || x &gt; view_xview[0]  + view_wview[0] + 300
          || y &lt; view_yview[0] - 300 || y &gt; min(view_yview[0] + view_hview[0] + 300, room_height-128)) {
      move_towards_point(obj_ship.x, obj_ship.y, 20)
    } else {
      if (alarm[3] &lt;= -1) {
        alarm[3] = room_speed*random_range(5, 8)
      }
    }
    break;
  case EEL_RISING:
    alarm[3] = -1;
    direction = 90;
    hspeed = tune_value(hspeed, 0, 0.25);
    vspeed = tune_value(vspeed, -6, 0.25);
    //If in sky
    if (y &lt; -500) {
      x = obj_ship.x;
      if (alarm[4] &lt;= -1) {
        alarm[4] = random_range(0,room_speed);
      }
    }
    break;
  case EEL_FALLING:
    direction = 270;
    image_angle = direction;
    //If fallen, change state
    if (y &gt; room_height-64) {
      vspeed = -vspeed/2;
      y = room_height-64
      state = EEL_IDLE;
    }
    if (hp &lt; (max_hp/2) &amp;&amp; y &lt; 496) {
      x = obj_ship.x
    }
    hspeed = 0
    break;
  case EEL_DIE:
    screenshake();
    hspeed = tune_value(hspeed, 0, 1);
    vspeed = tune_value(vspeed, 0, 1);
    break;  
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set image angle
if (abs(image_angle-direction) % 360 == 180) {
  image_angle = (image_angle - 2) % 360;
} else {
  image_angle = (image_angle+(sin(degtorad(direction-image_angle))*6)) % 360;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update Physics

update_physics();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update dmg multiplier
oxygen_decrease = speed*2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if hit = false &amp;&amp; hp &gt; 0 &amp;&amp; can_hit = true
{
 hit = true
 alarm[0] = 2
 can_hit = false
 if (global.pw_bullet3)
  hp -= 4*global.pw_bulletdmg;
 else
  hp -= 2*global.pw_bulletdmg;
 alarm[2] = room_speed*2
}

with (other)
{
  instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw lightning
if (shooting_shock) {
  draw_set_color(c_yellow);
  draw_lightning(x+(127*face_dir),y,obj_ship.x,obj_ship.y,c_white,4,4,6,true)
  //4-random(6) gives an answer that is more likely to be positive than negative, so it tends to curve
  draw_lightning(x+(127*face_dir),y,obj_ship.x,obj_ship.y,c_white,4,2,6,true)
  //2-random(6) gives an answer that is more likely to be negative than positive, so it curves the other way
  
  draw_lightning(x+(127*face_dir),y,obj_ship.x,obj_ship.y,c_white,4,3,6,true)//3-random(6) is equall in either way
  draw_lightning(x+(127*face_dir),y,obj_ship.x,obj_ship.y,c_white,4,3,6,true)//so it goes in a moderately straight line
  draw_set_colour(c_black);
  draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw anchor
draw_sprite_ext(sprite_index, image_index, x, y, 1, 1, direction, -1, image_alpha);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw healthbar

if hp &lt; max_hp
{
if alarm[2] &gt; -1
 {
  if hp_alpha &lt; 1
  {
   hp_alpha += 0.1
  }
  draw_set_alpha(hp_alpha)
  draw_healthbar(x-(abs(sprite_width)/2)-4, y-(abs(sprite_height)/2)-12, x+(abs(sprite_width)/2)+4, y-(abs(sprite_height)/2)-8,(hp/max_hp)*100, make_color_rgb(255,65,40),c_lime, c_green, 0, true, false)
  draw_set_alpha(1);
 }
 else
 {
  if hp_alpha &gt; 0.4
  {
   hp_alpha -= 0.05
  }
  draw_set_alpha(hp_alpha)
  draw_healthbar(x-(abs(sprite_width)/2)-4, y-(abs(sprite_height)/2)-12, x+(abs(sprite_width)/2)+4, y-(abs(sprite_height)/2)-8,(hp/max_hp)*100, make_color_rgb(255,65,40),c_lime, c_green, 0, true, false) 
  draw_set_alpha(1)
  
 }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>128,-16</point>
    <point>240,96</point>
    <point>128,208</point>
  </PhysicsShapePoints>
</object>
