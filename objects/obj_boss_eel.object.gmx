<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_boss_eel</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>par_boss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init boss stuff
event_inherited();
max_hp = 500
hp = 500
hit = false
can_hit = true
hp_alpha = 1
oxygen_decrease = 25;

// get shader constant handle
//colour_to_find = shader_get_uniform(shader_hit_flash, "f_Colour1");

bhpg_pattern_init(3,20,170,1,45,0,0,0,0,20,1,1,0,0);
bhpg_bullet_init(obj_bullet_enemy,8,0.15,0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///FSM
state = EEL_LEAVE_LEFT;
face_dir = 1;
shooting_shock = false;

target_hspeed = 20;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Y-Offset
yy = 0;
theta = 0;

d_theta = 2;
max_offset = 8;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change state
if (state == EEL_IDLE) {
  if (face_dir==1) {
    state = EEL_LEAVE_RIGHT;
  } else {
    state = EEL_LEAVE_LEFT;
  } 
} else if (state == EEL_LEAVE_LEFT) {
  if (random(2) &lt; 1.75) {
    state = EEL_FAST_RIGHT;
  } else {
    state = EEL_CROSS;
    face_dir = 1;
    hspeed = 14;
  }
  x = -100;
} else if (state == EEL_LEAVE_RIGHT) {
  if (random(2) &lt; 1.75) {
    state = EEL_FAST_LEFT;
  } else {
    state = EEL_CROSS;
    face_dir = -1;
    hspeed = -14;
  }
  x = room_width + 100;
} else if (state == EEL_CROSS) {
  if (face_dir == 1) {
    state = EEL_LEAVE_RIGHT;
  } else {
    state = EEL_LEAVE_LEFT;
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DO NOT USE!!! Used as shooting timer
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Can hit now
can_hit = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hit timer
hit = false
alarm[1] = 2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if dead (REMOVE DESTROY)
if (hp &lt; 1 &amp;&amp; state != EEL_DIE)
{
 instance_destroy();  //REMOVE THIS
 with(instance_create(x,y,obj_star_spawner)) { n = 400; }
 state = EEL_DIE;
 hspeed = 0;
 vspeed = 0;
 if (instance_number(obj_ship) &gt; 0) {
  obj_ship.combo_count += 1;
 }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update state
switch(state) {
  case EEL_IDLE:
    d_theta = abs(hspeed);
    max_offset = 8;
    hspeed = tune_value(hspeed, 2*face_dir, 0.2);
    vspeed = 0;
    if (x &gt; room_width) {
      x = room_width;
      face_dir = -1;
      hspeed = -hspeed;
    } else if (x &lt; 0) {
      x = 0;
      face_dir = 1;
      hspeed = -hspeed;
    }
    if (alarm[3] &lt;= -1) {
      alarm[3] = room_speed*random_range(3, 5)
    }
    break;
  case EEL_LEAVE_RIGHT:
    d_theta = abs(hspeed);
    max_offset = 8;
    face_dir = 1;
    if (x &gt; room_width+600 &amp;&amp; alarm[3] &lt;= -1) {
      if (alarm[3] &lt;= -1) {
        alarm[3] = room_speed/2;
      }
      y = min(max(obj_ship.y, 496), room_width - 128);
    } else {
      hspeed = tune_value(hspeed, 5, 0.2);
    }
    break;
  case EEL_LEAVE_LEFT:
    d_theta = abs(hspeed);
    max_offset = 8;
    face_dir = -1;
    if (x &lt; -600) {
      if (alarm[3] &lt;= -1) {
        alarm[3] = room_speed/2;
      }
      hspeed = tune_value(hspeed, 0, 0.5);
      y = min(max(obj_ship.y, 496), room_width - 128);
    } else {
      hspeed = tune_value(hspeed, -5, 0.2);
    }
    break;
  case EEL_FAST_RIGHT:
    d_theta = abs(hspeed);
    max_offset = 8;
    face_dir = 1;
    hspeed = 20;
    if (x &gt; obj_ship.x + 64) {
      state = EEL_LEAVE_RIGHT;
    }
    break;
  case EEL_FAST_LEFT:
    d_theta = abs(hspeed);
    max_offset = 8;
    face_dir = -1;
    hspeed = -20;
    if (x &lt; obj_ship.x - 64) {
      state = EEL_LEAVE_LEFT;
    }
    break;
  case EEL_CROSS:
    //Cross view
    d_theta = abs(hspeed);
    max_offset = 8;
    if (x &lt; view_xview[0] - 160 || x &gt; view_xview[0]  + view_wview[0] + 160) {
      //y = tune_value(y, obj_ship.y, 8);
    }
    if (x &lt; view_xview[0] - 160 &amp;&amp; target_hspeed &lt; 0) {
      target_hspeed = 14;
    } else if (x &gt; view_xview[0]+view_wview[0]+160 &amp;&amp; target_hspeed &gt; 0) {
      target_hspeed = -14;
    }
    face_dir = sign(target_hspeed);
    hspeed = tune_value(hspeed, target_hspeed, 1);
    if (alarm[3] &lt;= -1 &amp;&amp; x &gt; view_xview[0] - 160 &amp;&amp; x &lt; view_xview[0]  + view_wview[0] + 160) {
      alarm[3] = room_speed*random_range(3, 8);
    }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update Physics
event_inherited()

update_physics();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create y-offset for the floaty effect

theta = (theta+d_theta) % 360;
yy = sin(degtorad(theta))*max_offset;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if hit = false &amp;&amp; hp &gt; 0 &amp;&amp; can_hit = true
{
 hit = true
 alarm[0] = 2
 can_hit = false
 if (global.pw_bullet3)
  hp -= 4*global.pw_bulletdmg;
 else
  hp -= 2*global.pw_bulletdmg;
 alarm[2] = room_speed*2
}

with (other)
{
  instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw trail
draw_set_alpha(1)
draw_trail(48,64,c_black,-1,1,0, 0, yy);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw head
draw_sprite_ext(sprite_index, image_index, x, y+yy, face_dir, 1, image_angle, -1, image_alpha);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw healthbar

if hp &lt; max_hp
{
if alarm[2] &gt; -1
 {
  if hp_alpha &lt; 1
  {
   hp_alpha += 0.1
  }
  draw_set_alpha(hp_alpha)
  draw_healthbar(x-(abs(sprite_width)/2)-4, y-(abs(sprite_height)/2)-12, x+(abs(sprite_width)/2)+4, y-(abs(sprite_height)/2)-8,(hp/max_hp)*100, make_color_rgb(255,65,40),c_lime, c_green, 0, true, false)
  draw_set_alpha(1);
 }
 else
 {
  if hp_alpha &gt; 0.4
  {
   hp_alpha -= 0.05
  }
  draw_set_alpha(hp_alpha)
  draw_healthbar(x-(abs(sprite_width)/2)-4, y-(abs(sprite_height)/2)-12, x+(abs(sprite_width)/2)+4, y-(abs(sprite_height)/2)-8,(hp/max_hp)*100, make_color_rgb(255,65,40),c_lime, c_green, 0, true, false) 
  draw_set_alpha(1)
  
 }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>128,96</point>
    <point>256,128</point>
    <point>128,160</point>
  </PhysicsShapePoints>
</object>
