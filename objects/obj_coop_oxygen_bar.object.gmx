<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp = 200;

if (instance_number(obj_client) &gt; 0) {
  hp = obj_client.max_oxygen;
}

draw_gauge = true;

alarm[0] = room_speed/2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_number(obj_client) &gt; 0) {
  if ((obj_client.oxygen*100)/obj_client.max_oxygen &lt;= 20 &amp;&amp; hp &gt;= obj_client.oxygen) {
    if ((obj_client.oxygen*100)/obj_client.max_oxygen &lt;= 5) {
      draw_gauge = true;
    }
    else {
      draw_gauge = !draw_gauge;
    }
  }
  else if (hp &lt;= obj_client.oxygen) {
    draw_gauge = true;
  }
}

alarm[0] = room_speed/2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Circle script
//scr_draw_circle(x,y,20,100,180,360,100,c_blue,hp,maxhp)
//scale = display_get_gui_width()/960;
scale = 1;
if (instance_number(obj_client) &gt; 0) {
  if (obj_client.max_oxygen &gt; 0) {
    draw_set_alpha(0.4);
    draw_set_color(c_gray);
    draw_circle(display_get_gui_width()/2,display_get_gui_height()/10-1, scale*display_get_gui_height()/20, true);
  
    if (obj_client.oxygen &gt; hp) {
      draw_gauge = true;
    }
    
    var oxygen_colour;
    if ((obj_client.oxygen*100)/obj_client.max_oxygen &gt; 25) {
      draw_set_alpha(0.2);
      oxygen_colour = c_blue;
    }
    else {
      draw_set_alpha(0.4);
      oxygen_colour = c_red;
    }
    if (global.pw_oxygeninst) {
      hp -= sign( hp - obj_client.oxygen ) * min( abs( hp - obj_client.oxygen ), 20 )
    }
    else {
      hp -= sign( hp - obj_client.oxygen ) * min( abs( hp - obj_client.oxygen ), 1 )
    }
    if (draw_gauge) {
      scr_draw_circle(display_get_gui_width()/2,display_get_gui_height()/10,
        scale*display_get_gui_height()/20/*25*/,0,90,360,obj_client.max_oxygen/4,oxygen_colour,hp,obj_client.max_oxygen);
    
      if (global.draw_surface_arrows &amp;&amp; ((obj_client.oxygen*100)/obj_client.max_oxygen &lt; 20) &amp;&amp; obj_client.y &gt; 496) {
        draw_set_blend_mode(bm_normal);
        //draw_line_width(display_get_gui_width()/3, display_get_gui_height()/15, 
        //            display_get_gui_width()/3 , 16, display_get_gui_height()/120);
        /*draw_arrow(display_get_gui_width()*2/6, display_get_gui_height()/15, 
                    display_get_gui_width()*2/6, 4, display_get_gui_height()/40);
        draw_arrow(display_get_gui_width()*4/6, display_get_gui_height()/15, 
                    display_get_gui_width()*4/6, 4, display_get_gui_height()/40);*/
        for (i = 1; i &lt; 6; ++i) {
          if (i != 3) {
            draw_arrow(display_get_gui_width()*i/6, display_get_gui_height()/15, 
                        scale*display_get_gui_width()*i/6, 4, scale*display_get_gui_height()/20);
          }          
        }
      }    
    }
  }
}
else {
  hp = 200;
}
//draw stuff
draw_set_colour(c_black)
draw_set_alpha(0.5)
draw_set_font(font_consolas_14)
draw_set_valign(fa_center)
draw_set_halign(fa_center)
draw_text((display_get_gui_width()/2)-2,(display_get_gui_height()/10)+(scale*display_get_gui_height()/50),"O");
width = string_width("O");
draw_set_font(font_consolas_8)
draw_text(display_get_gui_width()/2+(width/2)+1,(display_get_gui_height()/10)+(scale*display_get_gui_height()/50)+7,"2");
draw_set_valign(fa_center)
draw_set_halign(fa_left)
draw_set_alpha(1);
draw_set_font(font_consolas_24);

/* Tip: use the MaxPoint in reference to select the number of segments for
 a smooth result */


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
