<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialise the client
if (instance_number(obj_server) &gt; 0) { instance_destroy(); exit;  }
clientx = 64;   // player start X and Y
clienty = 192;
oxygen = 200;
max_oxygen = 200;
p1_dead = false;
p2_dead = false;
decrease_alpha = 0;
p1_name = "";
for (var i = 0; i &lt; 5; i++) {
  messages[i] = "";
}
PlayerName=global.ServerName;   // get the name that was selected (it's a server OR player name)

bullet_timer_max_ = 30/global.pw_bullet_speed;

// Create a buffer for the network messages
buff = buffer_create(4096, buffer_grow, 1);
// Create a TCP/IP socket
client = network_create_socket(global.ServerType);
// remember this socket ID so the server can ignore it (if we have a local server)
global.client = client;
// We're playing!!
global.NetworkState = NETWORK_PLAY;

// Create a list to hold ALL sprites sent from the server
allsprites = ds_list_create();
sprites = 0;

// Connect to our server
var err = network_connect(client, global.connectip, 6510);
if( err!=0 ){
    // if we can't connect, show and error and restart... could be more graceful :)
    show_message("Error - can not connect to server!!");
    game_restart();
}

// Client has connected to the server, so send our "player name"
alarm[0]=120;
instance_create(0,0, obj_coop_oxygen_bar);
alarm[1] = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create object maps
player_map = ds_map_create();
explode_map = ds_map_create();
star_sparkle_map = ds_map_create();
bubble_pop_map = ds_map_create();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init power bar
slider_alpha = 0.0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!global.haveserver) {
  network_destroy(client);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_activate_all();
obj_fade_in.fade_in = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deactivate everything and wait for server to fade in
instance_deactivate_all(true);
instance_activate_object(obj_fade_in);
obj_fade_in.fade_in = false;
alarm[2] = 200;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Keep alive and send name
SendName();
SendKeepAlive();
alarm[0]=120;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Send joystick positions
if (instance_number(obj_controller) &gt; 0) {
  SendTouch(obj_controller);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set view to follow camera
if (instance_number(obj_camera) &lt;= 0) {
  with(instance_create(x,y, obj_camera)) {
    follow = obj_client;
  }
  view_object[0] = obj_camera;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create and alter any objects as required
var index = 0;
for(i=0;i&lt;sprites;i++){
    var iid, obj, xx,yy,sp, spindex, col, angle, alpha, xsc, ysc, hp, max_hp,
        spwidth, spheight, face_dir, state;
    iid = ds_list_find_value(allsprites,index++);
    obj = ds_list_find_value(allsprites,index++);
    xx = ds_list_find_value(allsprites,index++);
    yy = ds_list_find_value(allsprites,index++);
    sp = ds_list_find_value(allsprites,index++);
    spindex = ds_list_find_value(allsprites,index++);
    col = ds_list_find_value(allsprites,index++);
    angle = ds_list_find_value(allsprites,index++);
    alpha = ds_list_find_value(allsprites,index++);
    xsc = ds_list_find_value(allsprites,index++);
    ysc = ds_list_find_value(allsprites,index++);
    hp = ds_list_find_value(allsprites,index++);
    max_hp = ds_list_find_value(allsprites,index++);
    spwidth = ds_list_find_value(allsprites,index++);
    spheight = ds_list_find_value(allsprites,index++);
    face_dir = ds_list_find_value(allsprites,index++);
    state = ds_list_find_value(allsprites,index++);
    
    if (sp == spr_ship_edit) {
      if (is_undefined(ds_map_find_value(player_map, iid))) {
        player_map[? iid] = instance_create(xx, yy, obj_draw_tail);
      }
      with (player_map[? iid]) {
        tail_x = xx; tail_y = yy;
      }
    }
    
    if (obj == obj_explode64 || obj == obj_explode || obj == obj_explode_256 ||
          obj == obj_explode_256) {
      if (is_undefined(ds_map_find_value(explode_map, iid))) {
        explode_map[? iid] = instance_create(xx, yy, obj);
      }  
    }
    
    if (obj == obj_star_sparkle) {
      if (is_undefined(ds_map_find_value(star_sparkle_map, iid))) {
        audio_play_sound(snd_collect_star, 0, false);
        star_sparkle_map[? iid] = instance_create(xx, yy, obj_star_sparkle);
      }  
    }
    
    if (obj == obj_bubble_pop) {
      if (is_undefined(ds_map_find_value(bubble_pop_map, iid))) {
        bubble_pop_map[? iid] = instance_create(xx, yy, obj_bubble_pop);
      }  
    }
    
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fade out when both dead
if (p1_dead &amp;&amp; p2_dead &amp;&amp; instance_number(obj_fade_out) &lt;= 0) {
  instance_destroy();
  fade_out_to_room(room_coop_survival_score);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set messages
if (instance_number(obj_controller) &gt; 0) {
  for (var i=0; i&lt;5; i++) {
    obj_controller.messages[i] = messages[i];
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Networking code
var eventid = ds_map_find_value(async_load, "id");

// Our socket?
if( client == eventid )
{
    switch(global.NetworkState)
    {
        case NETWORK_PLAY :
        {
            // Read all data....
            var buff = ds_map_find_value(async_load, "buffer");
            var buffer_size = buffer_get_size(buff);
            show_debug_message("received buffer size = "+string(buffer_size));
            
            if (buffer_size &lt; 100 || buffer_size &gt; 5000) { exit; }
            
            // Get number of sprites sent
            sprites = buffer_read(buff, buffer_u32 ); 
            
            // Read out OUR location (allow scrolling maps)
            clientx = buffer_read(buff,buffer_s16);     //x
            clienty = buffer_read(buff,buffer_s16);     //y
            
            oxygen = buffer_read(buff,buffer_s16);     //oxygen
            max_oxygen = buffer_read(buff,buffer_s16);     //max_oxygen
            
            var received_size = buffer_read(buff, buffer_s16) //received size
            
            if (received_size != buffer_size) { exit; }
            
            score = buffer_read(buff,buffer_s16); //score
            
            p1_dead = buffer_read(buff,buffer_s16); //p1_dead
            p2_dead = buffer_read(buff,buffer_s16); //p2_dead
            
            decrease_alpha = buffer_read(buff,buffer_s16); //decrease_alpha
            
            p1_name = buffer_read(buff,buffer_string); //p1 name
            
            for (var i = 0; i &lt; 5; i++) {
              messages[i] = buffer_read(buff,buffer_string);  // messages
            }
        
            // Now clear the render list, and start filling it up with NEW data!
            ds_list_clear(allsprites);
            for(var i=0;i&lt;sprites;i++){
                ds_list_add(allsprites, buffer_read(buff,buffer_s16) );     //id
                ds_list_add(allsprites, buffer_read(buff,buffer_s16) );     //object_index
                ds_list_add(allsprites, buffer_read(buff,buffer_s16) );     //x
                ds_list_add(allsprites, buffer_read(buff,buffer_s16) );     //y
                ds_list_add(allsprites, buffer_read(buff,buffer_s16) );     //sprite_index
                ds_list_add(allsprites, buffer_read(buff,buffer_s16) );     //image_index
                ds_list_add(allsprites, buffer_read(buff,buffer_s16) );     //image_blend
                ds_list_add(allsprites, buffer_read(buff,buffer_s16) );     //image_angle
                ds_list_add(allsprites, buffer_read(buff,buffer_s16) );     //image_alpha
                ds_list_add(allsprites, buffer_read(buff,buffer_s16) );     //image_xscale
                ds_list_add(allsprites, buffer_read(buff,buffer_s16) );     //image_yscale
                ds_list_add(allsprites, buffer_read(buff,buffer_u16) );     //hp
                ds_list_add(allsprites, buffer_read(buff,buffer_u16) );     //max_hp
                ds_list_add(allsprites, buffer_read(buff,buffer_s16) );     //sprite_width
                ds_list_add(allsprites, buffer_read(buff,buffer_s16) );     //sprite_height
                ds_list_add(allsprites, buffer_read(buff,buffer_s16) );     //face_dir
                ds_list_add(allsprites, buffer_read(buff,buffer_s16) );     //state
            }  
        }    
    }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_destroy(client);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw enemies and player on minimap
var scale_ = 1;
old = draw_get_colour()
draw_set_alpha(0.1 - decrease_alpha);

var mapx = (view_wview[0]-132)/**scale*/;
var mapy = 0;
var mapwidth = 100/**scale*/;
var mapheight = 100/**scale*/;

draw_set_alpha(0.5 - decrease_alpha);
var u,v,xx,yy;

var index = 0;
for(i=0;i&lt;sprites;i++){
    var iid, obj, xxx,yyx,sp, spindex, col, angle, alpha, xsc, ysc, hp, max_hp, spwidth, spheight,
        face_dir, state;
    
    iid = ds_list_find_value(allsprites,index++);
    obj = ds_list_find_value(allsprites,index++);
    xxx = ds_list_find_value(allsprites,index++);
    yyy = ds_list_find_value(allsprites,index++);
    
    if (obj == obj_enemy1 || obj == obj_enemy_amoeba || obj == obj_enemy_fork || 
          obj == obj_enemy_shark || obj == obj_enemy_battleship || obj == obj_enemy_knife || 
          obj == obj_large_shark || obj == obj_boss_shark )
    {
      u = xxx/room_width;
      v = yyy/room_height;
      if (u &lt;= 1 &amp;&amp; v &lt;= 1 &amp;&amp; u &gt;= 0 &amp;&amp; v &gt;= 0) {
        xx = mapx+u*mapwidth;
        yy = mapy+v*mapheight;
        draw_set_color(c_red);
        draw_circle(xx, yy, 2/**scale_*/, false);
      }
    }
    
    if (obj == obj_ship) {
      u = xxx/room_width;
      v = yyy/room_height;
      if (u &lt;= 1 &amp;&amp; v &lt;= 1 &amp;&amp; u &gt;= 0 &amp;&amp; v &gt;= 0) {
        xx = mapx+u*mapwidth;
        yy = mapy+v*mapheight;
        draw_set_color(c_black)
        draw_circle(xx, yy, 4, false);
      }
    }
}

//Draw self on map
u = clientx/room_width;
v = clienty/room_height;
if (u &lt;= 1 &amp;&amp; v &lt;= 1 &amp;&amp; u &gt;= 0 &amp;&amp; v &gt;= 0) {
  xx = mapx+u*mapwidth;
  yy = mapy+v*mapheight;
  draw_set_color(c_black)
  draw_circle(xx, yy, 4, false);
}

draw_set_alpha(1);
draw_set_color(old);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw power bar
var ww = display_get_gui_width();
var hh = display_get_gui_height();
if (room==room_survival || room==room_coop_survival) {

//var bullet_timer = obj_ship.bullet_timer;
var bullet_timer_max = bullet_timer_max_ - 2;
var sea_half_height = (room_height - 496)/4;
var bullet_timer = max(2, min(max(0, 496+sea_half_height-clienty)*bullet_timer_max/sea_half_height, bullet_timer_max)) - 2;

    draw_set_alpha(min(0.2,slider_alpha));
    for(i=0; i &lt; round(hh/5); i+=1) //2.11
    {
        draw_line(0,(hh*2/5)+i,power(i/(ww/27.4),3)+3,(hh*2/5)+i);
    }
    //draw zero line
    draw_line(0,(hh*2/5)-1, ww/20 , (hh*2/5)-1);
    
    draw_set_color(c_black);
    draw_set_alpha(slider_alpha*4);
    draw_line_width(0,(hh*3/5)-((bullet_timer/bullet_timer_max)*(hh/5)), ww/19 , (hh*3/5)-((bullet_timer/bullet_timer_max)*(hh/5)),4);
    draw_set_color(c_white);

if (instance_number(obj_controller) &gt; 0) {
  if (obj_controller.lStick2 != 0) //TODO: only when started
  {
      if slider_alpha &lt; 0.4
      {
              slider_alpha += 0.01;
      }
  }
  else
  {
      if slider_alpha &gt; -0.2
      {
          slider_alpha -=0.01;
      }
  }
}

}
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw all sprites in level

// set the X and Y of the client so the room "follows" our player
x = clientx;
y = clienty;

// Now loop through all active sprites and draw them
var index = 0;
for(i=0;i&lt;sprites;i++){
    var iid, obj, xx,yy,sp, spindex, col, angle, alpha, xsc, ysc, hp, max_hp, spwidth, spheight,
        face_dir, state;
    
    iid = ds_list_find_value(allsprites,index++);
    obj = ds_list_find_value(allsprites,index++);
    xx = ds_list_find_value(allsprites,index++);
    yy = ds_list_find_value(allsprites,index++);
    sp = ds_list_find_value(allsprites,index++);
    spindex = ds_list_find_value(allsprites,index++);
    col = ds_list_find_value(allsprites,index++);
    angle = ds_list_find_value(allsprites,index++);
    alpha = ds_list_find_value(allsprites,index++);
    xsc = ds_list_find_value(allsprites,index++);
    ysc = ds_list_find_value(allsprites,index++);
    hp = ds_list_find_value(allsprites,index++);
    max_hp = ds_list_find_value(allsprites,index++);
    spwidth = ds_list_find_value(allsprites,index++);
    spheight = ds_list_find_value(allsprites,index++);
    face_dir = ds_list_find_value(allsprites,index++);
    state = ds_list_find_value(allsprites,index++);
    
    if (sp != -1 &amp;&amp; (!is_undefined(spindex)) &amp;&amp; sp != spr_ship_edit) {
      if (obj == obj_enemy_shark || obj == obj_large_shark || obj == obj_boss_shark) {
        if (state == SHARK_ATTACK || state == SHARK_DIE || state == SHARK_DEAD) {
          draw_sprite_ext(sp, spindex, xx, yy, 1, face_dir, angle, col, alpha);

        } else {
          draw_sprite_ext(sp, spindex, xx, yy, face_dir, 1, angle, col, alpha);
        }
      } else {
        draw_sprite_ext(sp, spindex, xx, yy, xsc, ysc, angle, col, alpha);
      }
    }
    
    // Draw healthbar
    if (max_hp &gt; 0 &amp;&amp; hp &gt; 0) {
      //show_debug_message("received hp = "+string(hp))
      //show_debug_message("received max hp = "+string(max_hp))
      //show_debug_message("% hp = "+string((hp*100.0)/max_hp))
      draw_healthbar(xx-(spwidth/2)-4, yy-(spheight/2)-12, xx+(spwidth/2)+4, yy-(spheight/2)-8,(hp*100.0)/max_hp, make_color_rgb(255,65,40),c_lime, c_green, 0, true, false)
    }
    
    if (obj == obj_ship) {
      //Draw p1 name
      draw_set_color(c_black);
      draw_set_font(font_consolas_8);
      draw_set_halign(fa_center);
      draw_text(xx, yy-25, p1_name);
      draw_set_halign(fa_left)
      if (p2_dead) {
        x = xx;
        y = yy;
      }
    }
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
