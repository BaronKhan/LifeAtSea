<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_final_boss</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_boss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init boss stuff
event_inherited();
max_hp = 5000
hp = 5000
hit = false
can_hit = true
hp_alpha = 1
oxygen_decrease = 10;

bhpg_pattern_init(1,180,135,10,180,0,0,0,30,room_speed/2,1,1,0,0);
bhpg_bullet_init(obj_bullet_final_boss,5,0.05,0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Y-Offset
yy = 0
y_add = false
temp_y = 0

//Wiggle offset
wiggle_offset = 0;
wiggle_add = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start spawning amoeba
alarm[3] = room_speed * 5;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init state
state = RAY_FOLLOWING;
rot_dir = 1;
//first_dm = false; //2/3rd hp
//second_dm = false;//1/3rd hp
//third_dm = false; //at 1/10th health indefinite
dm_count = 0;
dm_x = x;
dm_y = y;
dm_angle = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state = RAY_DEAD_FALL;
//with(instance_create(x,y,obj_star_spawner)) { n = 450; }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fade while dead
instance_create(0,0, obj_fade_white);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop DM
if (dm_count != 3) {
  state = RAY_FOLLOWING;
  if (instance_number(obj_final_boss_dm) &gt; 0) {
    with(obj_final_boss_dm) { instance_destroy(); }
  }
  if (instance_number(obj_lightning_dm) &gt; 0) {
    with(obj_lightning_dm) { instance_destroy(); }
  }
  if (instance_number(obj_final_boss_bubble) &gt; 0) {
    obj_final_boss_bubble.bubble_width = 0;
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create desperation move
instance_create(dm_x, dm_y, obj_final_boss_dm);
if (dm_count &lt; 3) {
  instance_create(dm_x, dm_y, obj_final_boss_bubble);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change direction or state
if (state == RAY_CIRCLE) {
  if (random(1) &lt; 0.5) {
    rot_dir *= -1;
  } else {
    state = RAY_FOLLOWING;
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn enemy
if (state != RAY_DEAD &amp;&amp; state != RAY_DEAD_FALL) {
  if (instance_number(obj_enemy_amoeba) &lt; 5) {
    add_enemy(obj_enemy_amoeba);
  }
  alarm[3] = room_speed * 5;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DO NOT USE!!! Used as shooting timer
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Can hit now
can_hit = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hit timer
hit = false
alarm[1] = 2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if dead
if (hp &lt; 1 &amp;&amp; state != RAY_DEAD &amp;&amp; state != RAY_DEAD_FALL)
{
  if (instance_number(obj_final_boss_dm) &gt; 0) {
    with(obj_final_boss_dm) { instance_destroy(); }
  }
  if (instance_number(obj_lightning_dm) &gt; 0) {
    with(obj_lightning_dm) { instance_destroy(); }
  }
  if (instance_number(obj_final_boss_bubble) &gt; 0) {
    obj_final_boss_bubble.bubble_width = 0;
  }
  if (instance_number(obj_enemy_amoeba) &gt; 0) {
    obj_enemy_amoeba.hp = 0;
  }
  state = RAY_DEAD;
  gravity = 0;
  hspeed = 0;
  vspeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update state
if (state != RAY_DEAD &amp;&amp; state != RAY_DEAD_FALL) {
if (y &lt;= 496) {
  if (state == RAY_DM) {
    gravity = 0;
    vspeed =0;
    hspeed = 0;
  } else {
    gravity = 0.04;
  }
  friction = 0;
  gravity_direction = 270;
  if (state != RAY_DM_PREP &amp;&amp; state != RAY_DM) {
    state = RAY_FOLLOWING;
  } else if (y &lt;= 456 &amp;&amp; state != RAY_DM) {
    state = RAY_DM;
    dm_x = x;
    dm_y = y - 16;
    dm_angle = 270;
    //instance_create(dm_x, dm_y, obj_lightning_dm);
    alarm[5] = room_speed*2;
  }
  if (state == RAY_DM) {
    gravity = 0;
    vspeed = 0;
    hspeed = 0;
    dm_angle = (dm_angle-8) % 360;
    x = dm_x + lengthdir_x(16, dm_angle);
    y = dm_y + lengthdir_y(16, dm_angle);
    if (alarm[6] &lt;= 0) { alarm[6] = room_speed*7; }
  }
} else {
  gravity = 0;
  switch(state) {
    case RAY_FOLLOWING:
      var dist = distance_to_object(obj_ship);
      if (dist &gt; 128) {
        if (obj_ship.can_move) {
          move_towards_point(obj_ship.x, obj_ship.y, 5);
        } else {
          move_towards_point(obj_ship.x, obj_ship.y, 0);
        }
        friction = 0.4;
      } else {
        state = RAY_CIRCLE;
        rot_dir = choose(1, -1);
      }
      if (dist &lt; 256) {
        start_angle = (image_angle-10) % 360;
        if (hp &lt; max_hp/4) {
          bhpg_pattern_step();
        }
      }
      break;
    case RAY_CIRCLE:
      friction = 0;
      dir = (point_direction(x, y, obj_ship.x, obj_ship.y)+(rot_dir*90)) % 360;
      hspeed = tune_value(hspeed, lengthdir_x(4.6, dir), 0.05);
      vspeed = tune_value(vspeed, lengthdir_y(4.6, dir), 0.05);
      if (alarm[4] &lt;= -1) { alarm[4] = room_speed*random_range(4, 6); }
      if (distance_to_object(obj_ship) &gt; 512) {
        state = RAY_FOLLOWING;
      }
      start_angle = (image_angle-10) % 360;
      if (hp &lt; max_hp/4) {
        bhpg_pattern_step();
      }
      break;
    case RAY_DM_PREP:
      move_towards_point(room_width/2, 400, 5);
      friction = 0.4;
      break;
    case RAY_DM:
      gravity = 0;
      vspeed = 0;
      hspeed = 0;
      dm_angle = (dm_angle-8) % 360;
      x = dm_x + lengthdir_x(16, dm_angle);
      y = dm_y + lengthdir_y(16, dm_angle);
      if (alarm[6] &lt;= 0) { alarm[6] = room_speed*7; }
      break;
  }
}
}

if (state == RAY_DEAD) {
  hspeed = 0;
  vspeed = 0;
  gravity = 0;
  screenshake();
  if (alarm[7] &lt;= -1) {
    alarm[7] = room_speed;
  }
  if (alarm[8] &lt;= -1) {
    alarm[8] = room_speed*4;
  }
} else if (state == RAY_DEAD_FALL) {
  gravity = 0.08;
  friction = 0;
  gravity_direction = 270;
  vspeed = min(vspeed, 30);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shoot bullets
if ( y &gt; 496 &amp;&amp; (state == RAY_FOLLOWING || state == RAY_CIRCLE)) {
  if (alarm[2] &lt; 0) {
    if (hp &lt; max_hp/2) {
      with(instance_create(x+lengthdir_x(10, image_angle),y+lengthdir_y(10, image_angle),obj_bullet_final_boss)) {
        stop_homing = false;
        direction = point_direction(x, y, obj_ship.x, obj_ship.y);
        image_angle = direction;
        speed = obj_final_boss.speed + 15
      }
      alarm[2] = 4;
    } else {
      with(instance_create(x+lengthdir_x(10, image_angle),y+lengthdir_y(10, image_angle),obj_bullet_final_boss)) {
        stop_homing = false;
        direction = point_direction(x, y, obj_ship.x, obj_ship.y);
        image_angle = direction;
        speed = obj_final_boss.speed + 8
      }
      alarm[2] = 8;
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for DM move
var first_dm = (hp &lt; (max_hp*2/3) &amp;&amp; dm_count == 0);
var second_dm = (hp &lt; (max_hp/3) &amp;&amp; dm_count == 1);
var third_dm = (hp &lt; (max_hp/5) &amp;&amp; dm_count == 2);

if ((first_dm || second_dm || third_dm) &amp;&amp; (state==RAY_FOLLOWING || state==RAY_CIRCLE)
      &amp;&amp; y &gt; 496) {
  dm_count++;
  state = RAY_DM_PREP;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create y-offset for the floaty effect and wiggle-offset when moving
if speed &lt; 0.5
{
  if y_add = false
   yy -= 0.1
  if y_add = true
   yy += 0.1

  if yy &gt; 4
  {
   yy = 4
   y_add = false
  }

  if yy &lt; -4 
  {
   yy = -4
   y_add = true
  }
 
  if wiggle_offset != 0
  {
    if wiggle_offset &gt; 0
      wiggle_offset -= 0.1
    else
      wiggle_offset += 0.1
  }
}
else
{
  if yy != 0
  {
    if yy &gt; 0
      yy -= 0.1
    else
      yy += 0.1
  }
  
  if (y &gt; 496 &amp;&amp; speed &gt; 0.5)
  {
    if wiggle_add = false
      wiggle_offset -= 0.2
    if wiggle_add = true
      wiggle_offset += 0.2
  
    if wiggle_offset &gt; 2
    {
      wiggle_offset = 2
      wiggle_add = false
    }
  
    if wiggle_offset &lt; -2
    {
      wiggle_offset = -2
      wiggle_add = true
    }
  }
  /*else
  {
    if wiggle_offset != 0
    {
      if wiggle_offset &gt; 0
        wiggle_offset -= 0.2
      else
        wiggle_offset += 0.2
    }
  }*/

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set image angle
if (state == RAY_FOLLOWING || state == RAY_CIRCLE) {
  image_angle = (image_angle+(sin(degtorad(point_direction(x,y,obj_ship.x, obj_ship.y)-image_angle))*3));
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clamp position
x = max(0, min(x, room_width));
if (state != RAY_DEAD_FALL) {
  y = max(0, min(y, room_height));
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update physics
update_physics();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if hit = false &amp;&amp; hp &gt; 0 &amp;&amp; can_hit = true &amp;&amp; state != RAY_DM_PREP
{
 hit = true
 alarm[0] = 2
 can_hit = false
 if (global.pw_bullet3)
  hp -= 4*global.pw_bulletdmg;
 else
  hp -= 2*global.pw_bulletdmg;
}

with (other)
{
 instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state == RAY_DEAD_FALL) {
  instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw player, trail and eyes
x_wiggle_offset = lengthdir_x(wiggle_offset, image_angle+90)
y_wiggle_offset = lengthdir_y(wiggle_offset, image_angle+90)

player_colour = c_red;

draw_trail_bullet(16,22,player_colour,-1,1,1, x_wiggle_offset, y_wiggle_offset+yy);


if (!(alarm[1] &gt; room_speed/10)) {
  draw_sprite_ext(sprite_index, image_index, x+x_wiggle_offset, y+y_wiggle_offset+yy, image_xscale, image_yscale, image_angle,image_blend, image_alpha);
}

draw_set_blend_mode(bm_normal)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw healthbar
if (instance_number(obj_ship) &gt; 0 &amp;&amp; point_distance(x,y,obj_ship.x, obj_ship.y) &lt; 1200) {


  if hp &lt; max_hp
  {
  if alarm[2] &gt; -1
   {
    if hp_alpha &lt; 1
    {
     hp_alpha += 0.1
    }
    draw_set_alpha(hp_alpha)
    draw_healthbar(x-(sprite_width/2)-4, y-(sprite_height/2)-12, x+(sprite_width/2)+4, y-(sprite_height/2)-8,(hp/max_hp)*100, make_color_rgb(255,65,40),c_lime, c_green, 0, true, false)
    draw_set_alpha(1);
   }
   else
   {
    if hp_alpha &gt; 0.4
    {
     hp_alpha -= 0.05
    }
    draw_set_alpha(hp_alpha)
    draw_healthbar(x-(sprite_width/2)-4, y-(sprite_height/2)-12, x+(sprite_width/2)+4, y-(sprite_height/2)-8,(hp/max_hp)*100, make_color_rgb(255,65,40),c_lime, c_green, 0, true, false) 
    draw_set_alpha(1)
    
   }
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0</PhysicsObjectFriction>
  <PhysicsObjectAwake>0</PhysicsObjectAwake>
  <PhysicsObjectKinematic>-1</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>35,35</point>
    <point>13,35</point>
  </PhysicsShapePoints>
</object>
