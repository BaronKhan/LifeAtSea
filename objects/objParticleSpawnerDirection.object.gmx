<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create

//0 = right, 1 = up, 2 = left, 3 = down;
spawnDirection = 0;
spawnLoop = false; //keep spawning?

//The particle!
phyParticle = -1; //Set this in the creation event, make sure that the particle exists!

//the particle creation variables
partHorSpd = 0; //horizontal speed
partVerSpd = 0; //vertical speed
partAutoSpd = true; //automatically set speed (based on direction)
partColor = c_white; //color!
partAlpha = 1; //opacity aka transparency
partNumber = 1; //number of particles to create per step

//animation
image_speed = 0;
image_index = 0;
alarm[0] = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set sprite_index | partAutoSpd

//Set sprite index based on direction
switch (spawnDirection)
{
    case 0: sprite_index = sprParticleCannonR; break;
    case 1: sprite_index = sprParticleCannonU; break;
    case 2: sprite_index = sprParticleCannonL; break;
    case 3: sprite_index = sprParticleCannonD; break;
}

//Set particle speed based on direction (if enabled)
if (partAutoSpd == true)
{
    switch (spawnDirection)
    {
        case 0: partHorSpd = 10; break;
        case 1: partVerSpd = -10; break;
        case 2: partHorSpd = -10; break;
        case 3: partVerSpd = 10; break;
    }        
};

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Particles!
if ((keyboard_check(vk_space) or spawnLoop == true) and physics_particle_count() &lt; global.maxParticleCount) //make sure we're under the max particle count
{
    //create a particle!
    var angle = 0;
    switch (spawnDirection)
    {
        case 0: angle = 0; break;
        case 1: angle = 90; break;
        case 2: angle = 180; break;
        case 3: angle = 270; break;
        default: angle = spawnDirection;
    }
    
    repeat (partNumber)
    {
        physics_particle_create(phyParticle, x+lengthdir_x(28, angle), y+lengthdir_y(28, angle), partHorSpd, partVerSpd, partColor, partAlpha, get_particle_id(phyParticle));
    };    
    
    //we're creating particles, start animation
    image_speed = 0.2;
} else
{
    //if not creating, do not animate and reset to first frame
    image_speed = 0;
    image_index = 0;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
