<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ship_edit</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_physics</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialise general variables
new_speed = 0
friction = 0.4
new_image_angle = 0
eye_image = 0
image_speed = 0
eye_inc = random(0.05)
locked = false
ne = 0

dead = false // not actually dead, just float to surface and wiggle to shore, game over

direction = 270
image_angle = 270

instance_create(x,y,obj_camera)
view_object[0] = obj_camera


x_cursor = x+lengthdir_x(200,image_angle)
y_cursor = y+lengthdir_y(200,image_angle)

instance_create(x_cursor,y_cursor,obj_cursor)

//powerups
gravity_pull = 0.08
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Trail Particle system
// Code created using Aerohawk Effects 4 by Wormintheworks

// VARIABLE SETUP. Put this in the create event before the PARTICLE SETUP.

_partabc_shape=pt_shape_pixel
_partabc_count=1
_partabc_sprite=1
//sPartSprite=spr_empty
_partabc_col1=16775882
_partabc_col2=16777088
_partabc_col3=16777215
_partabc_alp1=1
_partabc_alp2=1
_partabc_alp3=1
_partabc_sizmn=0.15
_partabc_sizmx=0.20
_partabc_sizic=0
_partabc_sizwg=0
_partabc_xscale=1
_partabc_yscale=1
_partabc_orimn=0
_partabc_orimx=0
_partabc_oriic=0
_partabc_oriwg=0
_partabc_orirl=0
_partabc_dirmn=direction-180
_partabc_dirmx=direction-180
_partabc_diric=0
_partabc_dirwg=0
_partabc_spdmn=0
_partabc_spdmx=0
_partabc_spdic=0
_partabc_spdwg=0
_partabc_grvam=0
_partabc_grvdir=0
_partabc_lifemin=25
_partabc_lifemax=40
_partabc_abl=0
_emiabc_radius=2
_emiabc_shape=ps_shape_ellipse
_emiabc_distr=ps_distr_linear

// PARTICLE SETUP. Put this in the create event after the VARIABLE SETUP.

_sysabc=part_system_create()
part_system_depth(_sysabc,depth+1)
_partabc=part_type_create()
part_type_shape(_partabc,_partabc_shape)
if (_partabc_sprite=1) {part_type_sprite(_partabc,spr_bubble,0,0,0)}
part_type_color3(_partabc,_partabc_col1,_partabc_col2,_partabc_col3)
part_type_alpha3(_partabc,_partabc_alp1,_partabc_alp2,_partabc_alp3)
part_type_size(_partabc,_partabc_sizmn,_partabc_sizmx,_partabc_sizic,_partabc_sizwg)
part_type_scale(_partabc,_partabc_xscale,_partabc_yscale)
part_type_orientation(_partabc,_partabc_orimn,_partabc_orimx,_partabc_oriic,_partabc_oriwg,_partabc_orirl)
part_type_direction(_partabc,_partabc_dirmn,_partabc_dirmx,_partabc_diric,_partabc_dirwg)
part_type_speed(_partabc,_partabc_spdmn,_partabc_spdmx,_partabc_spdic,_partabc_spdwg)
part_type_gravity(_partabc,_partabc_grvam,_partabc_grvdir)
part_type_life(_partabc,_partabc_lifemin,_partabc_lifemax)
part_type_blend(_partabc,_partabc_abl)
_emiabc=part_emitter_create(_sysabc)

/* PARTICLE CREATION. default is stream, uncomment to burst. Place in the event
that should start your particle creation, Aerohawk Effects 4 uses the CREATE event. */

//part_emitter_stream(_sysabc,_emiabc,_partabc,_partabc_count)

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Y-Offset
yy = 0
y_add = false
temp_y = 0

//Wiggle offset
wiggle_offset = 0;
wiggle_add = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inherit Event
event_inherited()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy Particle System
part_system_clear(_sysabc)
part_system_destroy(_sysabc)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create the bullet
if locked = true
{
 with (instance_create(x,y,obj_bullet))
 {
  ne = obj_ship.ne
 }
}
else
{
 with (instance_create(x,y,obj_bullet))
 {
  ne = 0
 }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement code

//for (i=0; i&lt;obj_water.nodes; i+=1)
//{
 if y &gt; 496
 //y &gt; obj_water.yy[i]
 {
  gravity = 0
  friction = 0.4
  //direction = (direction+(sin(degtorad(obj_controller.dStick-direction))*12));
  direction = obj_controller.dStick
  new_speed = obj_controller.lStick / 12;
  if new_speed &gt; speed
  {
   speed = new_speed
  }
  if obj_controller.lStick2 != 0
  {
   image_angle = (image_angle+(sin(degtorad(obj_controller.dStick2-image_angle))*30));
  }
  else
  {
   image_angle = (image_angle+(sin(degtorad(obj_controller.dStick-image_angle))*30));
   //image_angle = direction
  }
  x = max(0, min(x, room_width));
  y = max(0, min(y, room_height));
 }
 else
 {
  gravity = gravity_pull;
  friction = 0
  gravity_direction = 270
   if obj_controller.lStick2 != 0
  {
   image_angle = (image_angle+(sin(degtorad(obj_controller.dStick2-image_angle))*30));
  }
  else
  {
   //image_angle = (image_angle+(sin(degtorad(obj_controller.dStick-image_angle))*30));
   image_angle = direction
 }
  obj_controller.dStick = direction
  x = max(0, min(x, room_width));
  y = max(0, min(y, room_height));
  if speed &gt; 20
  {
   speed = 20
  }
 }
//}
 
//Shooting timer

if obj_controller.lStick2 != 0
{
 if alarm[0] = -1
 {
  alarm[0] = 2
 }
}


//Set water physics
xsp = hspeed
ysp = vspeed


//Limit direction between 0 and 360

if direction &gt; 360
{
 offset = direction - 360
 direction = offset
}

if direction &lt; 0
{
 offset = 0 - direction
 direction = 360 - offset
}



//Limit image_angle between 0 and 360

if image_angle &gt; 360
{
 offset = image_angle - 360
 image_angle = offset
}

if image_angle &lt; 0
{
 offset = 0 - image_angle
 image_angle = 360 - offset
}


//Deform sprite
/*if (speed &lt; 4 || speed = 4)
{
 if abs(direction-image_angle) &lt; 90 || abs(direction-image_angle) &gt; 270
 {
  image_speed = 0
  sprite_index = spr_ship_edit     //&lt;---------------------EDIT!!!!!!!!
  image_index = floor((speed/4)*14)
 }
 else
 {
  image_speed = 0
  sprite_index = spr_ship_edit     //&lt;---------------------EDIT!!!!!!!!
  image_index = 0
 }
}
else
{
 if abs(direction-image_angle) &lt; 90  || abs(direction-image_angle) &gt; 270
 {
  if sprite_index = spr_ship_edit
  {
   sprite_index = spr_player_fast
   image_index = 0
  }
  image_speed = 0.25 * ((speed-4)/0.93)
 }
 else
 {
 // if abs(direction-image_angle) &lt; 355
 // {
   image_speed = 0
   if sprite_index = spr_player_fast
   {
    sprite_index = spr_ship_edit     //&lt;---------------------EDIT!!!!!!!!
   }
   image_index = 0
//  }
 }
}*/

if (abs(direction-image_angle) &gt; 1)
{
  image_index = 0
}



//Auto-aim

ne = 0
locked = false

if obj_controller.lStick2 != 0
{
 ne = instance_nearest(x+lengthdir_x(200,image_angle),y+lengthdir_y(200,image_angle),par_enemy)
 if abs(x-ne.x) &lt; 480 &amp;&amp; abs(y-ne.y) &lt; 270
 {
  //if point_direction(x,y,ne.x,ne.y) &lt; obj_controller.dStick2+90 &amp;&amp; point_direction(x,y,ne.x,ne.y) &gt; obj_controller.dStick2-90
  if abs(point_direction(x,y,ne.x,ne.y) - obj_controller.dStick2) &lt; 90 || abs(point_direction(x,y,ne.x,ne.y) - obj_controller.dStick2) &gt; 270
  {
   new_angle = point_direction(x,y,ne.x,ne.y)
   image_angle = (image_angle+(sin(degtorad(new_angle-image_angle))*50));
   locked = true
  }
 }
}


/* DRAFT 3
if obj_controller.lStick2 != 0
{
 ne = instance_nearest(x+lengthdir_x(200,image_angle),y+lengthdir_y(200,image_angle),par_enemy)
 if point_distance(x,y,ne.x,ne.y) &lt; 551
 {
  //if point_direction(x,y,ne.x,ne.y) &lt; obj_controller.dStick2+90 &amp;&amp; point_direction(x,y,ne.x,ne.y) &gt; obj_controller.dStick2-90
  if abs(point_direction(x,y,ne.x,ne.y) - obj_controller.dStick2) &lt; 90 || abs(point_direction(x,y,ne.x,ne.y) - obj_controller.dStick2) &gt; 270
  {
   new_angle = point_direction(x,y,ne.x,ne.y)
   image_angle = (image_angle+(sin(degtorad(new_angle-image_angle))*50));
   locked = true
  }
 }
}

*/

/* DRAFT 2
if obj_controller.lStick2 != 0
{
 ne = instance_nearest(x+lengthdir_x(250,image_angle),y+lengthdir_y(250,image_angle),par_enemy)
 if point_direction(x,y,ne.x,ne.y) &lt; obj_controller.dStick2+90 &amp;&amp; point_direction(x,y,ne.x,ne.y) &gt; obj_controller.dStick2-90 &amp;&amp; point_distance(x,y,ne.x,ne.y) &lt; 551
 {
  new_angle = point_direction(x,y,ne.x,ne.y)
  image_angle = (image_angle+(sin(degtorad(new_angle-image_angle))*50));
  locked = true
 }
}
*/


/* DRAFT 1
if obj_controller.lStick2 != 0
{
 ne = instance_nearest(x+lengthdir_x(250,image_angle),y+lengthdir_y(250,image_angle),par_enemy)
 if point_direction(x,y,ne.x,ne.y) &lt; image_angle+45 &amp;&amp; point_direction(x,y,ne.x,ne.y) &gt; image_angle-45 &amp;&amp; point_distance(x,y,ne.x,ne.y) &lt; 551
 {
  new_angle = point_direction(x,y,ne.x,ne.y)
  image_angle = (image_angle+(sin(degtorad(new_angle-image_angle))*50));
  locked = true
 }
}
*/

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create trail
/*
_partabc_dirmn=direction-180
_partabc_dirmx=direction-180
part_type_direction(_partabc,_partabc_dirmn,_partabc_dirmx,_partabc_diric,_partabc_dirwg)
if speed &gt; 4 &amp;&amp; y &gt; 496
{
part_emitter_region(_sysabc,_emiabc,x-_emiabc_radius,x+_emiabc_radius,y-_emiabc_radius,y+_emiabc_radius,_emiabc_shape,_emiabc_distr)
part_emitter_burst(_sysabc,_emiabc,_partabc,_partabc_count)
}

*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create y-offset for the floaty effect and wiggle-offset when moving
if speed &lt; 0.5
{
  if y_add = false
   yy -= 0.1
  if y_add = true
   yy += 0.1

  if yy &gt; 4
  {
   yy = 4
   y_add = false
  }

  if yy &lt; -4 
  {
   yy = -4
   y_add = true
  }
 
  if wiggle_offset != 0
  {
    if wiggle_offset &gt; 0
      wiggle_offset -= 0.1
    else
      wiggle_offset += 0.1
  }
}
else
{
  if yy != 0
  {
    if yy &gt; 0
      yy -= 0.1
    else
      yy += 0.1
  }
  
  if (y &gt; 496)
  {
    if wiggle_add = false
      wiggle_offset -= 0.2
    if wiggle_add = true
      wiggle_offset += 0.2
  
    if wiggle_offset &gt; 2
    {
      wiggle_offset = 2
      wiggle_add = false
    }
  
    if wiggle_offset &lt; -2
    {
      wiggle_offset = -2
      wiggle_add = true
    }
  }
  /*else
  {
    if wiggle_offset != 0
    {
      if wiggle_offset &gt; 0
        wiggle_offset -= 0.2
      else
        wiggle_offset += 0.2
    }
  }*/

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animate eyes

eye_image += eye_inc

if eye_image &gt; 16
{
 eye_image = 0
}

if round(eye_image) &lt; 16
{
 eye_inc = random(0.1)
}
else
{
 eye_inc = 0.2
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy Particle System
part_system_clear(_sysabc)
part_system_destroy(_sysabc)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///NOTE: PUT THIS AT THE BEGINNING OF THE GAME!!!
global.scrshake = 5

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw player, trail and eyes
x_wiggle_offset = lengthdir_x(wiggle_offset, image_angle+90)
y_wiggle_offset = lengthdir_y(wiggle_offset, image_angle+90)

draw_trail(16,22,c_black,-1,1,1, x_wiggle_offset, y_wiggle_offset+yy)

draw_sprite_ext(sprite_index, image_index, x+x_wiggle_offset, y+y_wiggle_offset+yy, image_xscale, image_yscale, image_angle,image_blend, image_alpha)

draw_set_blend_mode(bm_normal)
draw_sprite_ext(spr_player_eyes, floor(eye_image), x+x_wiggle_offset, y+y_wiggle_offset+yy, image_xscale, image_yscale, image_angle, c_white, image_alpha)
draw_set_blend_mode(image_blend)

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Cursor

if locked = false
{
 x_cursor = x+lengthdir_x(200,image_angle)
 y_cursor = y+lengthdir_y(200,image_angle)
 //draw_sprite(spr_cursor,0,x+lengthdir_x(250,image_angle),y+lengthdir_y(250,image_angle))
}
else
{
 ne = instance_nearest(x+lengthdir_x(200,image_angle),y+lengthdir_y(200,image_angle),par_enemy)
 x_cursor = ne.x
 y_cursor = ne.y
 //draw_sprite(spr_cursor,0,ne.x,ne.y)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>35,35</point>
    <point>35,35</point>
  </PhysicsShapePoints>
</object>
