<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-500</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get shader uniforms
if (global.use_lightrays) {
  u_resolution = shader_get_uniform(shader_lightrays, "iResolution");
  u_seconds = shader_get_uniform(shader_lightrays, "iGlobalTime");
}

if (global.use_distortion) {
  u_resolution_water = shader_get_uniform(shader_underwater, "iResolution");
  u_seconds_water = shader_get_uniform(shader_underwater, "iGlobalTime");
  u_texture_water = shader_get_sampler_index(shader_underwater, "tex_water");
}

sec = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create sun
if (room == room_title) {
  instance_create(view_xview[0]*0.95,view_yview[0]-128, obj_sun);
} else {
  instance_create(view_xview[0]*0.95,view_yview[0], obj_sun);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get water variables
yy = array_create(array_length_1d(obj_water.yy));
nodewidth = obj_water.nodewidth;
waterheight = obj_water.waterheight;
nodes = obj_water.nodes;
obj_water_x = obj_water.x;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy if not used
global.use_lightrays = global.use_lightrays &amp;&amp; (display_get_height() &gt;= 1080)
if (!global.use_lightrays &amp;&amp; !global.use_distortion) {
  instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>application_surface_draw_enable(true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop Automated Drawing of Application Surface in PostDraw Event

application_surface_draw_enable(false);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Increase Time
if (instance_number(obj_message_box) &lt;= 0) {
  sec += 1 / (room_speed);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>application_surface_draw_enable(true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw wave distortion effect
var scale = display_get_width()/960;
var ww = display_get_width();
var hh = display_get_height();
if (os_type == os_windows) {
  scale = display_get_gui_width()/960;
  ww = display_get_gui_width();
  hh = display_get_gui_height();
}
draw_surface_ext(application_surface, 0,0, scale, scale, 0, c_white, 1);

var yy_;
if (instance_number(obj_water) &gt; 0 &amp;&amp; instance_number(obj_message_box) &lt;= 0) {
  with (obj_water) {
    yy_ = array_create(array_length_1d(yy));
    array_copy(yy_, 0, yy, 0, array_length_1d(yy));
  }
  array_copy(yy, 0, yy_, 0, array_length_1d(yy_));
}
  

if (global.use_distortion) {
  shader_set(shader_underwater);
  
  shader_set_uniform_f(u_resolution_water,ww,hh);
  
  shader_set_uniform_f(u_seconds_water,sec);
  
  texture_set_stage(u_texture_water, surface_get_texture(application_surface)); //feed application surface into shader
  
  draw_primitive_begin(pr_trianglestrip);
  for (i = 0; i &lt; nodes; i += 1)
  {
    var node_xx = obj_water_x+(i*nodewidth);
    if (node_xx &gt;= view_xview[0]-nodewidth*2 &amp;&amp;
      node_xx &lt;= view_xview[0]+view_wview[0]+nodewidth*2)
    {
      draw_vertex((node_xx-view_xview[0])*scale, (yy[i]-view_yview[0])*scale);
      draw_vertex((node_xx-view_xview[0])*scale, max(yy[i]-view_yview[0], view_hview[0])*scale);
    }
  }
  draw_primitive_end();
  
  shader_reset();

}


if (global.use_lightrays) {
  shader_set(shader_lightrays);
  
  shader_set_uniform_f(u_resolution,ww,hh);
  
  shader_set_uniform_f(u_seconds,sec);
  
  draw_primitive_begin(pr_trianglestrip);
  for (i = 0; i &lt; nodes; i += 1)
  {
    var node_xx = obj_water_x+(i*nodewidth);
    if (node_xx &gt;= view_xview[0]-nodewidth*2 &amp;&amp;
      node_xx &lt;= view_xview[0]+view_wview[0]+nodewidth*2)
    {
      draw_vertex((node_xx-view_xview[0])*scale, (yy[i]-view_yview[0])*scale);
      draw_vertex((node_xx-view_xview[0])*scale, max(yy[i]-view_yview[0], view_hview[0])*scale);
    }
  }
  draw_primitive_end();
  
  shader_reset();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw wave distortion effect (OLD)





/*var surface = surface_create(view_xview[0], view_yview[0]);
surface_copy(surface, 0, 0, application_surface);
draw_surface(surface, view_xview[0], view_yview[0]);
surface_free(surface);*/

/*var surface = surface_create(960, 540);
surface_copy(surface, 0, 0, application_surface);

shader_set(shader_underwater);

shader_set_uniform_f(u_resolution_water,view_wview[0],view_hview[0]);

shader_set_uniform_f(u_seconds_water,sec);

texture_set_stage(u_texture_water, surface_get_texture(surface)); //feed application surface into shader
//draw_rectangle(100, 0, 960, 540, false)
//draw_rectangle(obj_camera.x-480, obj_camera.y-270, obj_camera.x+480, obj_camera.x+270, false)

shader_reset();
surface_free(surface);*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
