<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_boss_worm_head</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>par_boss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialise variables
event_inherited();
max_hp = 250
hp = 250
hit = false
can_hit = true
hp_alpha = 1
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialise bullet pattern
bhpg_pattern_init(3,20,170,1,45,0,0,0,0,20,1,1,0,0);
bhpg_bullet_init(obj_bullet_enemy,8,0.15,0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialise state
state = WORM_DIG_UP;
vspeed = -30;
target_direction = direction+random_range(5, 30);
target_speed = -30;

outside_room = true;

audio_play_sound(snd_worm_scream, 0, false);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set circling variables
reverse_time = random_range(room_speed, room_speed*10);
orbit_deg = 0;
circle_x = 0;
circle_y = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create body array
pos_queue = ds_queue_create();
var body_num = 4;
var i = 0;
repeat(body_num) {
  var body_part = instance_create(x,y,obj_boss_worm_body);
  with (body_part) {
    part_num = i;
    /*if (i == body_num-1) {
      sprite_index = spr_boss_worm_tail;
    }*/
  }
  i++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if outisde for too long
if (outside_room) {
  outside_room = false;
  x = room_width/2;
  y = room_height/2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///On defeated
state = WORM_DEAD;
instance_destroy()
instance_create(x,y,obj_explode_256)
with(instance_create(x,y,obj_star_spawner)) { n = 100; }
if (instance_number(obj_ship) &gt; 0) {
  obj_ship.combo_count += 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change to falling state
if (state == WORM_RISING) {
  var all_above = true;
  if (instance_number(obj_boss_worm_body) &gt; 0) {
    with (obj_boss_worm_body) {
      if (y &gt; -128) {
        all_above = false;
        break;
      }
    }
  }
  if (all_above) {
    state = WORM_FALLING;
    x = random_range(256, room_width-256);
    y = -128
    vspeed = 15;
  } else {
    alarm[6] = 2;
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change to dig up state
if (state == WORM_DIG_DOWN) {
  var all_below = true;
  if (instance_number(obj_boss_worm_body) &gt; 0) {
    with (obj_boss_worm_body) {
      if (y &lt; room_height+128) {
        all_below = false;
        break;
      }
    }
  }
  if (all_below) {
    state = WORM_DIG_UP;
    audio_play_sound(snd_worm_scream, 0, false);
    x = random_range(256, room_width-256);
    y = room_height+256;
    vspeed = -30;
  } else {
    alarm[5] = room_speed/2;
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Timeout for digging (UNUSED)
state = WORM_DIG_UP;
vspeed = -5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Randomly change state
i = random(5);
if (i &lt; 1) {
  state = WORM_RANDOM;
} else if (i &lt; 2.5) {
  if (y &gt; room_height - 256 || y &lt; 500) {
    alarm[3] = room_speed/2;
    state = WORM_RANDOM;
  } else {
    state = WORM_DIG_DOWN;
  }
} else if (i &lt; 3) {
  if (y &lt; 500) {
    alarm[3] = room_speed/2;
    state = WORM_RANDOM;
  } else {
    state = WORM_RISING;
    audio_play_sound(snd_worm_scream, 0, false);
  }
} else if (i &lt; 3.5) {
  state = WORM_CIRCLE;
  orbit_deg = point_direction(obj_ship.x, obj_ship.y, x, y);
} else {
  state = WORM_FOLLOWING;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DO NOT USE!!! Used as shooting timer
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_hit = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hit = false
alarm[1] = 2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Only defeated if other parts are defeated
event_inherited()

if hp &lt; 1
{
  if (instance_number(obj_boss_worm_body) &lt;= 0) {
    state = WORM_DEAD_SHAKING;
  } else {
    with (obj_boss_worm_body) {
      if (part_num == 0) {
          obj_boss_worm_head.hp = hp;
          hp = 0;
          event_user(0);
      }
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update state
gravity = 0;
switch(state) {
  case WORM_DIG_UP:
    direction = 90.01;
    image_angle = direction;
    //If out of the ground, change state
    if (y &lt; room_height/2 &amp;&amp; alarm[3] &lt;= -1) {
      state = WORM_RANDOM;
    }
    //Shoot bullets from below
    if (obj_ship.x &gt; x-128 &amp;&amp; obj_ship.x &lt; x+128 &amp;&amp; y &gt; obj_ship.y &amp;&amp; y-obj_ship.y &lt; 240) {
      start_angle = 80;
      bhpg_pattern_step();
    }
    hspeed = 0;
    if (y &gt; room_height-64) {
      vspeed = -30;
      screenshake();
    } else {
      vspeed = tune_value(vspeed, -5, 1);
    }
    break;
  case WORM_DIG_DOWN:
    alarm[3] = -1;
    hspeed = tune_value(hspeed, 0, 0.25);
    direction = 270.02;
    //Shoot bullets from above
    if (obj_ship.x &gt; x-128 &amp;&amp; obj_ship.x &lt; x+128 &amp;&amp; y &lt; obj_ship.y &amp;&amp; obj_ship.y-y &lt; 240) {
      start_angle = 260;
      bhpg_pattern_step();
    }
    if (y &gt; room_height-128) {
      vspeed = tune_value(vspeed, 30, 0.5)
      if (y &gt; room_height + 2000 &amp;&amp; alarm[5] &lt;= -1) {
        alarm[5] = random_range(0,room_speed);
      } else {
        screenshake();
      }
    } else {
      vspeed = 5;
    }
    break;
  case WORM_RANDOM:
    if (y &gt;= 496) {
      if (irandom(60) &lt; 1) {
        target_direction = (target_direction+random_range(-90, 90)) % 360;
        target_speed = max(4, min(speed+random_range(-0.1, 0.1), 8));
      }
      speed = tune_value(speed, target_speed, 0.1);
      direction = (direction+(sin(degtorad(target_direction-direction))*6));
    } else {
      target_direction = random_range(225, 315);
    }
    //Set bounds
    if (x &lt; 0 &amp;&amp; hspeed&lt;0) {
      x = 0;
      hspeed = -hspeed;
      if (target_direction &gt; 90 &amp;&amp; target_direction &lt; 270) {
        target_direction = (target_direction+180) % 360;
      }
    }
    if (x &gt; room_width &amp;&amp; hspeed&gt;0) {
      x = room_width;
      hspeed = -hspeed;
      if (target_direction &lt; 90 &amp;&amp; target_direction &gt; 270) {
        target_direction = (target_direction+180) % 360;
      }
    }
    if (y &gt; room_height-128 &amp;&amp; vspeed&gt;0) {
      y = room_height-128;
      vspeed = -vspeed;
      if (target_direction &gt; 180 &amp;&amp; target_direction &lt; 360) {
        target_direction = (target_direction+180) % 360;
      }
    }
    if (alarm[3] &lt;= -1) {
      alarm[3] = room_speed*random_range(4, 8);
    }
    break;
  case WORM_RISING:
    alarm[3] = -1;
    //Shoot bullets from below
    if (obj_ship.x &gt; x-128 &amp;&amp; obj_ship.x &lt; x+128 &amp;&amp; y &gt; obj_ship.y &amp;&amp; y-obj_ship.y &lt; 240) {
      start_angle = 80;
      bhpg_pattern_step();
    }
    direction = 90.01;
    hspeed = tune_value(hspeed, 0, 0.25);
    vspeed = tune_value(vspeed, -6, 0.25);
    //If in sky
    if (y &lt; -500 &amp;&amp; alarm[6] &lt;= -1) {
      alarm[6] = random_range(0,room_speed);
    }
    break;
  case WORM_FALLING:
    direction = 270.01;
    image_angle = direction;
    //If fallen, change state
    if (y &gt; room_height/2 &amp;&amp; alarm[3] &lt;= -1) {
      speed = divide(speed,2);
      state = WORM_RANDOM;
      break;
    }
    //Shoot bullets from above
    if (obj_ship.x &gt; x-128 &amp;&amp; obj_ship.x &lt; x+128 &amp;&amp; y &lt; obj_ship.y &amp;&amp; obj_ship.y-y &lt; 240) {
      start_angle = 260;
      bhpg_pattern_step();
    }
    hspeed = 0
    vspeed = 7;
    break;
  case WORM_FOLLOWING:
    if (y &gt;= 496) {
      direction = (direction+(sin(degtorad(point_direction(x,y,obj_ship.x,obj_ship.y)-direction))*3));
      speed = tune_value(speed, 4.5, 0.25);
      start_angle = (image_angle-10) % 360;
      bhpg_pattern_step();
    } 
    if (alarm[3] &lt;= -1) {
      alarm[3] = room_speed*random_range(3, 5);
    }
    break;
  case WORM_CIRCLE:
    orbit_deg = (orbit_deg+3) % 360;
    if (y &gt;= 496) {
      dist_to_player = distance_to_object(obj_ship);
      angle_to_player = point_direction(x, y, obj_ship.x, obj_ship.y);
      image_angle = (image_angle+(sin(degtorad(angle_to_player-image_angle))*6));
      start_angle = (image_angle-10) % 360;
      bhpg_pattern_step();
      circle_x = obj_ship.x+lengthdir_x(256, orbit_deg);
      circle_y = obj_ship.y+lengthdir_y(256, orbit_deg);
      move_towards_point(circle_x, circle_y, min(6, point_distance(x,y,circle_x, circle_y)));
      
    }
    if (alarm[3] &lt;= -1) {
      alarm[3] = room_speed*random_range(3, 5);
    }
    x = clamp(x, 0, room_width);
    break;
  case WORM_DEAD_SHAKING:
    hspeed = 0;
    vspeed = 0;
    screenshake();
    if (alarm[7] &lt; 0) {
      audio_play_sound(snd_worm_scream, 0, false);
      alarm[7] = room_speed*3;
    }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set gravity
if (y &lt; 496 &amp;&amp; state!=WORM_RISING &amp;&amp; state != WORM_FALLING) {
  gravity = 0.04;
} else {
  gravity = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set image angle
if (state != WORM_CIRCLE &amp;&amp; state != WORM_DEAD_SHAKING) {
  image_angle = (image_angle+(sin(degtorad(direction-image_angle))*12));
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update position queue

/*if (ds_queue_size(pos_queue) &lt; room_speed/1.5) {
  var pos = ds_map_create();
  ds_map_add(pos, "x", x);
  ds_map_add(pos, "y", y);
  ds_map_add(pos, "angle", image_angle);
  ds_queue_enqueue(pos_queue, pos);
}*/

while (ds_queue_size(pos_queue) &gt;= room_speed/2) {
  ds_queue_dequeue(pos_queue);
}
var pos = ds_map_create();
ds_map_add(pos, "x", x);
ds_map_add(pos, "y", y);
ds_map_add(pos, "angle", image_angle);
ds_queue_enqueue(pos_queue, pos);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update Physics
xsp = hspeed
ysp = vspeed
update_physics();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check back in room
if (outside_room) {
  if (x &gt; 0 &amp;&amp; y &gt; 0 &amp;&amp; x &lt; room_width &amp;&amp; y &lt; room_height) {
    outside_room = false;
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if hit = false &amp;&amp; hp &gt; 0 &amp;&amp; can_hit = true
{
 hit = true
 alarm[0] = 2
 can_hit = false
 if (global.pw_bullet3)
  hp -= 4*global.pw_bulletdmg;
 else
  hp -= 2*global.pw_bulletdmg;
 alarm[2] = room_speed*2
}

with (other)
{
 instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
alarm[8] = room_speed * 10;
outside_room = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw healthbar &lt;--- CHANGE THIS TO SUM OF ALL HEALTH
if (instance_number(obj_ship) &gt; 0 &amp;&amp; point_distance(x,y,obj_ship.x, obj_ship.y) &lt; 1200) {


  if hp &lt; max_hp
  {
  if alarm[2] &gt; -1
   {
    if hp_alpha &lt; 1
    {
     hp_alpha += 0.1
    }
    draw_set_alpha(hp_alpha)
    draw_healthbar(x-(sprite_width/2)-4, y-(sprite_height/2)-12, x+(sprite_width/2)+4, y-(sprite_height/2)-8,(hp/max_hp)*100, make_color_rgb(255,65,40),c_lime, c_green, 0, true, false)
    draw_set_alpha(1);
   }
   else
   {
    if hp_alpha &gt; 0.4
    {
     hp_alpha -= 0.05
    }
    draw_set_alpha(hp_alpha)
    draw_healthbar(x-(sprite_width/2)-4, y-(sprite_height/2)-12, x+(sprite_width/2)+4, y-(sprite_height/2)-8,(hp/max_hp)*100, make_color_rgb(255,65,40),c_lime, c_green, 0, true, false) 
    draw_set_alpha(1)
    
   }
  }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw self
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>112,256</point>
    <point>112,0</point>
    <point>176,128</point>
  </PhysicsShapePoints>
</object>
