<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///README - PHYSICS PARTICLES
//@tehwave

//Make sure you've read all of this before using the example:
/***************************************************
    This is a list of answers and solutions to some of the most common questions and issues.
    
    ** HOW DO I SETUP MY PHYSICS PARTICLE SYSTEM? **
    Create the object "sysParticleController" -- it'll automatically handle initalization of all particles and draw them.
    
    ** HOW DO I CREATE A PHYSICS PARTICLE? **
    Before you can create/use any physics particles, you must have run the following scripts once:
        init_particle_id();
        init_particle_data();
    These scripts create the necessary data structures that we'll use for storing information about our particles.
    
    You can now start creating your particles. The following is an example of how to create one.
    
    global.Water = create_phy_particle(phy_particle_flag_water | phy_particle_flag_colourmixing, sprWater, 0);
    
    variable       script              particle flags                                           sprite     animated (true/false)
    
    You must store the returned data from the script in a variable. I suggest you make it a global variable.
    
    You must give the particle a flag. A flag is a way to define how the particle will behave. You can find
    a list of possible flags in the documentation, under physics_particle_set_flags at Reference/Physics/Soft Body Particles
    To combine multiple flags, you must use the sign | between each flag, as seen in the example.
    
    You must give the particle a sprite. Any sprite will do, but understand that large sprites or sprites with many frames
    will consume a lot of memory, and will severely hinder performance.
    
    You must tell the particle if it is animated. A true/false or 1/0 is sufficient. 
    
    That's it!
    
        
    ** MY OBJECTS DON'T COLLIDE! **
    - Did you check 'Use physics'?
    - Did you add an collision event with the object and it's not empty?
    - Is the collision shape correctly set up?
    - Does the object have an parent?    

    
    ** THE PHYSICS ARE WOBBLY/JANKY/WEIRD! / WARNING: Too many manifolds in collision **
    Sometimes, the physics will behave odd. They'll wobble all the place.
    This can due to a lot of things, but some of the common causes are:
    - The collision shape is incorrectly set up
    - The physics objects are competing for the same space
    - The physics variables you've used for the object are too high/low
    - The physics object is moving so fast (or so slow) that the physics calculation
    can't keep up. physics_world_update_speed(speed), physics_world_update_iterations(iterations),
    and phy_bullet are functions and variables that can remedy this.
    
    
    ** DOCUMENTATION **
    If you're confused about a function, what it does or how to use it properly,
    and I haven't been clear enough with my comments, consult the documentation.
    
    It should tell you all what you need to know about the function, and it includes an example
    of it in use. 
    
    If you're not sure how to open the documentation, you can access it by doing one of these:
    - Press F1.
    - Clicking on a function or variable with Middle-Mouse button.
    - Visit docs.yoyogames.com
    - Go to Help, then select Contents.
    
    
    ** THOSE ARE GORGEOUS ART ASSETS, CAN I USE THEM? **
    Absolutely -- and without attribution!
    
    In fact, you can download 14,000+ art assets of the same style and by the same guy right here:
    - http://kenney.itch.io/kenney-donation
    They're cheap and licensed CC0 - meaning you can do anything you want with them. 
    
    
    ** CAN I USE THIS COMMERCIALLY? **
    By purchasing this asset, you may use it freely for all non-commercial and commercial use in
    your own projects. If this asset is required in a project that is not rightfully owned by you,
    this asset must be purchased by the rightful owner of the project.
    
    License questions can be mailed to support@peterchrjoergensen.dk
    
           
    ** NEED FURTHER ASSISTANCE? **
    You can try contacting me on Twitter @tehwave or on reddit /u/tehwave.
    
    Alternatively, I moderate the /r/gamemaker subreddit, where we have people
    who are glad to help in you in any way you can - provided you read the subreddit guidelines first!

 ***************************************************/

//To ensure people actually pay attention to this README, there is an
//error below that is easy to fix. Simply remove or comment out the following line:

/* Once you're finished reading, please do some of the following:
    - Review the asset on the Marketplace. The feedback you give is the foundation for improvement.
    - Follow me on twitter: @tehwave
    - Try my other Marketplace assets. - https://marketplace.yoyogames.com/publishers/100/peter-tehwave-jorgensen
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
