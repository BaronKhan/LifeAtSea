<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ship_edit</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_physics</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
lStick = 0;
dStick = 0;
lStick2 = 0;
dStick2 = 0;

///Initialise general variables
can_move = true;
started = true;
new_speed = 0
friction = 0.4
new_image_angle = 0
locked = false
ne = 0

direction = 270
image_angle = 270

x_cursor = x+lengthdir_x(200,image_angle)
y_cursor = y+lengthdir_y(200,image_angle)

cursor = instance_create(x,y,obj_cursor_coop);

hit_explode = false;

bullet_timer = 2;

//combos
combo_count = 0;

//powerups
gravity_pull = 0.08;
max_oxygen = 200*global.pw_oxygeninc;
max_speed = 20;
bullet_timer_max = 30/global.pw_bullet_speed;

//life
dead = false; // not actually dead, just float to surface and wiggle to shore, game over
dead_surface = false;
oxygen = max_oxygen;

hit = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Expel oxygen when low
if ((oxygen &lt; max_oxygen * 0.2) &amp;&amp; (oxygen &gt; max_oxygen * 0.05)) {
  instance_create(x+lengthdir_x(10,image_angle), y+lengthdir_y(10,image_angle), obj_hit_bubbles);
}

//Start expelling oxygen when low
alarm[4] = (oxygen/max_oxygen)*500;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Recover from hit
hit = false;
combo_count = 0;
can_get_no_hit_3 = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Reset explode collision
hit_explode = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///decrease oxygen
oxygen--;
alarm[1] = room_speed/4;
oxygen = clamp(oxygen, 0, max_oxygen);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create the bullet
if (y &gt; 496) {
  if locked = true
  {
    with (instance_create(x,y,obj_bullet))
    {
      ne = obj_ship_coop.ne;
    }
  }
  else
  {
    with (instance_create(x,y,obj_bullet))
    {
      ne = 0
    }
  }
  if (global.pw_bullet3) {
    with (instance_create(x+lengthdir_x(8, image_angle+90),y+lengthdir_y(8, image_angle+90),obj_bullet)) {
      ne = 0;
    }
    with (instance_create(x+lengthdir_x(8, image_angle-90),y+lengthdir_y(8, image_angle-90),obj_bullet)) {
      ne = 0;
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement code

//for (i=0; i&lt;obj_water.nodes; i+=1)
//{
 if y &gt; 496
 //y &gt; obj_water.yy[i]
 {
  gravity = 0
  friction = 0.4
  got_oxygen_bonus = false;
  //direction = (direction+(sin(degtorad(obj_controller.dStick-direction))*12));
  
  if (!dead &amp;&amp; can_move) {
    direction = dStick;
    new_speed = lStick / 12;
  }
  else if (dead || !started) {
    if (!started || (y &gt; 496 &amp;&amp; !dead_surface)) { direction = 90; }
    else if (started &amp;&amp; dead) {
      if (!dead_surface) {
        dead_surface = true;
      }
      direction = 165; 
    }
    new_speed = 5.33;
  }
  
  if new_speed &gt; speed
  {
   speed = new_speed
  }
  
  if (!dead &amp;&amp; can_move) {
    if lStick2 != 0
    {
     image_angle = (image_angle+(sin(degtorad(dStick2-image_angle))*30));
    }
    else
    {
     image_angle = (image_angle+(sin(degtorad(dStick-image_angle))*30));
     //image_angle = direction
    }
  }
  else {
    image_angle = direction;
  }
  
  //Added this as fix
  //image_angle = (image_angle+(sin(degtorad(dStick2-image_angle))*30));
  
  
  if (!dead) {
    x = max(0, min(x, room_width));
  }
  y = max(0, min(y, room_height));
 }
 else
 {
  if (global.pw_oxygeninst) {
    oxygen += 20;
  }
  else {
    oxygen += 1;
  }
  gravity = gravity_pull;
  hspeed += random_range(-0.01,0.01)
  friction = 0
  gravity_direction = 270
  
  //Get oxygen bonus
  if (!got_oxygen_bonus &amp;&amp; !dead &amp;&amp; can_move) {
    if (oxygen/max_oxygen &lt; 0.1) {
      add_message("Risky! +50pts");
      score += 50;
    }
    else if (oxygen/max_oxygen &lt; 0.2) {
      add_message("Close! +20pts");
      score += 20;
    }
    got_oxygen_bonus = true;
  }
  
  if (!dead &amp;&amp; can_move) {
    if lStick2 != 0
    {
     image_angle = (image_angle+(sin(degtorad(dStick2-image_angle))*30));
    }
    else
    {
     //image_angle = (image_angle+(sin(degtorad(obj_controller.dStick-image_angle))*30));
     image_angle = direction
    }
  }
  else if (dead) {
    image_angle = direction;
    if (y &gt; 490 &amp;&amp; dead_surface) { direction = 165; }
    else
    {
      if (!dead_surface) {
        dead_surface = true;
        direction = 165;
      }
      
      gravity = gravity_pull;
    }
    new_speed = 5.33;
  } else {
      gravity = gravity_pull;
    }
  }
 
  if (!dead) { x = max(0, min(x, room_width)); }
  y = max(0, min(y, room_height));
  if speed &gt; max_speed
  {
   speed = max_speed
  }

 
//Shooting timer

//Old timer
/*if obj_controller.lStick2 != 0 &amp;&amp; !dead
{
 if alarm[0] = -1
 {
  alarm[0] = 2
 }
}*/

  if (lStick2 != 0 || (!global.dual_controls &amp;&amp; locked)) &amp;&amp; !dead &amp;&amp; can_move
  {
   if alarm[0] = -1
   {
    if (room != room_survival &amp;&amp; room != room_coop_test) {
     alarm[0] = 2;
    } else {
     var sea_half_height = (room_height - 496)/4;
     bullet_timer_max = 30/global.pw_bullet_speed;
     bullet_timer = floor(max(2, min(max(0, 496+sea_half_height-y)*bullet_timer_max/sea_half_height, bullet_timer_max)));
     alarm[0] = floor(max(2, min(max(0, 496+sea_half_height-y)*bullet_timer_max/sea_half_height, bullet_timer_max)));
    }
   }
  }

//Set water physics
xsp = hspeed
ysp = vspeed


//Limit direction between 0 and 360
// (WTF??? I would not type this now)

if direction &gt; 360
{
 offset = direction - 360
 direction = offset
}

if direction &lt; 0
{
 offset = 0 - direction
 direction = 360 - offset
}



//Limit image_angle between 0 and 360
// (Again, I would not type this now)

if image_angle &gt; 360
{
 offset = image_angle - 360
 image_angle = offset
}

if image_angle &lt; 0
{
 offset = 0 - image_angle
 image_angle = 360 - offset
}


//Deform sprite
/*if (speed &lt; 4 || speed = 4)
{
 if abs(direction-image_angle) &lt; 90 || abs(direction-image_angle) &gt; 270
 {
  image_speed = 0
  sprite_index = spr_ship_edit     //&lt;---------------------EDIT!!!!!!!!
  image_index = floor((speed/4)*14)
 }
 else
 {
  image_speed = 0
  sprite_index = spr_ship_edit     //&lt;---------------------EDIT!!!!!!!!
  image_index = 0
 }
}
else
{
 if abs(direction-image_angle) &lt; 90  || abs(direction-image_angle) &gt; 270
 {
  if sprite_index = spr_ship_edit
  {
   sprite_index = spr_player_fast
   image_index = 0
  }
  image_speed = 0.25 * ((speed-4)/0.93)
 }
 else
 {
 // if abs(direction-image_angle) &lt; 355
 // {
   image_speed = 0
   if sprite_index = spr_player_fast
   {
    sprite_index = spr_ship_edit     //&lt;---------------------EDIT!!!!!!!!
   }
   image_index = 0
//  }
 }
}*/

if (abs(direction-image_angle) &gt; 1)
{
  image_index = 0
}



//Auto-aim

ne = 0
locked = false

if (instance_number(par_enemy) &gt; 0) {
  if (lStick2 != 0 || !global.dual_controls) &amp;&amp; !dead &amp;&amp; can_move
  {
   ne = instance_nearest(x+lengthdir_x(200,image_angle),y+lengthdir_y(200,image_angle),par_enemy)
   if abs(x-ne.x) &lt; 480 &amp;&amp; abs(y-ne.y) &lt; 270
   {
    //if point_direction(x,y,ne.x,ne.y) &lt; obj_controller.dStick2+90 &amp;&amp; point_direction(x,y,ne.x,ne.y) &gt; obj_controller.dStick2-90
    if (!global.dual_controls ||
        abs(point_direction(x,y,ne.x,ne.y) - dStick2) &lt; 90 || abs(point_direction(x,y,ne.x,ne.y) - dStick2) &gt; 270)
    {
     locked = true
     if (ne.object_index == obj_enemy_shark || ne.object_index == obj_boss_shark
          || ne.object_index == obj_large_shark) {
      if (ne.state == SHARK_DIE || ne.state == SHARK_DEAD) {
        locked = false;
      }
     }
     if (ne.object_index == obj_final_boss) {
      if (ne.state == RAY_DM_PREP || ne.state == RAY_DEAD || ne.state == RAY_DEAD_FALL) {
        locked = false;
      }
     }
     if (locked) {
      new_angle = point_direction(x,y,ne.x,ne.y)
      image_angle = (image_angle+(sin(degtorad(new_angle-image_angle))*50));
     }
    }
   }
  }
}


/* DRAFT 3
if obj_controller.lStick2 != 0
{
 ne = instance_nearest(x+lengthdir_x(200,image_angle),y+lengthdir_y(200,image_angle),par_enemy)
 if point_distance(x,y,ne.x,ne.y) &lt; 551
 {
  //if point_direction(x,y,ne.x,ne.y) &lt; obj_controller.dStick2+90 &amp;&amp; point_direction(x,y,ne.x,ne.y) &gt; obj_controller.dStick2-90
  if abs(point_direction(x,y,ne.x,ne.y) - obj_controller.dStick2) &lt; 90 || abs(point_direction(x,y,ne.x,ne.y) - obj_controller.dStick2) &gt; 270
  {
   new_angle = point_direction(x,y,ne.x,ne.y)
   image_angle = (image_angle+(sin(degtorad(new_angle-image_angle))*50));
   locked = true
  }
 }
}

*/

/* DRAFT 2
if obj_controller.lStick2 != 0
{
 ne = instance_nearest(x+lengthdir_x(250,image_angle),y+lengthdir_y(250,image_angle),par_enemy)
 if point_direction(x,y,ne.x,ne.y) &lt; obj_controller.dStick2+90 &amp;&amp; point_direction(x,y,ne.x,ne.y) &gt; obj_controller.dStick2-90 &amp;&amp; point_distance(x,y,ne.x,ne.y) &lt; 551
 {
  new_angle = point_direction(x,y,ne.x,ne.y)
  image_angle = (image_angle+(sin(degtorad(new_angle-image_angle))*50));
  locked = true
 }
}
*/


/* DRAFT 1
if obj_controller.lStick2 != 0
{
 ne = instance_nearest(x+lengthdir_x(250,image_angle),y+lengthdir_y(250,image_angle),par_enemy)
 if point_direction(x,y,ne.x,ne.y) &lt; image_angle+45 &amp;&amp; point_direction(x,y,ne.x,ne.y) &gt; image_angle-45 &amp;&amp; point_distance(x,y,ne.x,ne.y) &lt; 551
 {
  new_angle = point_direction(x,y,ne.x,ne.y)
  image_angle = (image_angle+(sin(degtorad(new_angle-image_angle))*50));
  locked = true
 }
}
*/

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clamp oxygen value
oxygen = clamp(oxygen, 0, max_oxygen)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check oxygen
if (oxygen &lt;= 0 &amp;&amp; can_move) {
  dead = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update physics
update_physics();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset sticks
    xStick = 0;
    yStick = 0;
    lStick = 0;
    xStick2 = 0;
    yStick2 = 0;
    lStick2 = 0;
    dStick2 = 0;
    dStick = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_trail_bullet(16,22,c_black,-1,1,1, 0, 0);
draw_self();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Cursor
if (can_move) {
  if locked == false
  {
   x_cursor = x+lengthdir_x(200,image_angle)
   y_cursor = y+lengthdir_y(200,image_angle)
   //draw_sprite(spr_cursor,0,x+lengthdir_x(250,image_angle),y+lengthdir_y(250,image_angle))
  }
  else
  {
  if (instance_number(par_enemy) &gt; 0) {
     ne = instance_nearest(x+lengthdir_x(200,image_angle),y+lengthdir_y(200,image_angle),par_enemy)
     x_cursor = ne.x
     y_cursor = ne.y
     if (ne.object_index == obj_enemy_shark) {
        if (ne.state == SHARK_DIE || ne.state == SHARK_DEAD) {
          ne = 0
          x_cursor = x+lengthdir_x(200,image_angle)
          y_cursor = y+lengthdir_y(200,image_angle)
        }  
     }
   }
   //draw_sprite(spr_cursor,0,ne.x,ne.y)
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0</PhysicsObjectFriction>
  <PhysicsObjectAwake>0</PhysicsObjectAwake>
  <PhysicsObjectKinematic>-1</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>35,35</point>
    <point>13,35</point>
  </PhysicsShapePoints>
</object>
